//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Tue Jan 21 11:10:26 GMT 2014
//
// Method conflict info:
// Method: axi_read_bus_arID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arADDR
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arLEN
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arSIZE
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arBURST
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arLOCK
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arCACHE
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arPROT
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arVALID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_arREADY
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_read_bus_arREADY
//
// Method: axi_read_bus_rREADY
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_read_bus_rID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_read_bus_rID
//
// Method: axi_read_bus_rDATA
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_read_bus_rDATA
//
// Method: axi_read_bus_rRESP
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_read_bus_rRESP
//
// Method: axi_read_bus_rLAST
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_read_bus_rLAST
//
// Method: axi_read_bus_rVALID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_read_bus_rVALID
//
// Method: axi_write_bus_awID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awADDR
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awLEN
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awSIZE
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awBURST
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awLOCK
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awCACHE
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awPROT
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awVALID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_awREADY
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_write_bus_awREADY
//
// Method: axi_write_bus_wID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_wDATA
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_wSTRB
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_wLAST
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_wVALID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_wREADY
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_write_bus_wREADY
//
// Method: axi_write_bus_bREADY
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
//
// Method: axi_write_bus_bID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_write_bus_bID
//
// Method: axi_write_bus_bRESP
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bVALID,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_write_bus_bRESP
//
// Method: axi_write_bus_bVALID
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       server_request_put,
// 	       server_response_get
// Conflicts: axi_write_bus_bVALID
//
// Method: server_request_put
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_response_get
// Conflicts: server_request_put
//
// Method: server_response_get
// Conflict-free: axi_read_bus_arID,
// 	       axi_read_bus_arADDR,
// 	       axi_read_bus_arLEN,
// 	       axi_read_bus_arSIZE,
// 	       axi_read_bus_arBURST,
// 	       axi_read_bus_arLOCK,
// 	       axi_read_bus_arCACHE,
// 	       axi_read_bus_arPROT,
// 	       axi_read_bus_arVALID,
// 	       axi_read_bus_arREADY,
// 	       axi_read_bus_rREADY,
// 	       axi_read_bus_rID,
// 	       axi_read_bus_rDATA,
// 	       axi_read_bus_rRESP,
// 	       axi_read_bus_rLAST,
// 	       axi_read_bus_rVALID,
// 	       axi_write_bus_awID,
// 	       axi_write_bus_awADDR,
// 	       axi_write_bus_awLEN,
// 	       axi_write_bus_awSIZE,
// 	       axi_write_bus_awBURST,
// 	       axi_write_bus_awLOCK,
// 	       axi_write_bus_awCACHE,
// 	       axi_write_bus_awPROT,
// 	       axi_write_bus_awVALID,
// 	       axi_write_bus_awREADY,
// 	       axi_write_bus_wID,
// 	       axi_write_bus_wDATA,
// 	       axi_write_bus_wSTRB,
// 	       axi_write_bus_wLAST,
// 	       axi_write_bus_wVALID,
// 	       axi_write_bus_wREADY,
// 	       axi_write_bus_bREADY,
// 	       axi_write_bus_bID,
// 	       axi_write_bus_bRESP,
// 	       axi_write_bus_bVALID,
// 	       server_request_put
// Conflicts: server_response_get
//
//
// Ports:
// Name                         I/O  size props
// axi_read_ARID                  O     4
// axi_read_ARADDR                O    32
// axi_read_ARLEN                 O     4
// axi_read_ARSIZE                O     3
// axi_read_ARBURST               O     2
// axi_read_ARLOCK                O     2
// axi_read_ARCACHE               O     4
// axi_read_ARPROT                O     3
// axi_read_ARVALID               O     1
// axi_read_RREADY                O     1
// axi_write_AWID                 O     4
// axi_write_AWADDR               O    32
// axi_write_AWLEN                O     4
// axi_write_AWSIZE               O     3
// axi_write_AWBURST              O     2
// axi_write_AWLOCK               O     2
// axi_write_AWCACHE              O     4
// axi_write_AWPROT               O     3
// axi_write_AWVALID              O     1
// axi_write_WID                  O     4
// axi_write_WDATA                O   128
// axi_write_WSTRB                O    16
// axi_write_WLAST                O     1
// axi_write_WVALID               O     1
// axi_write_BREADY               O     1
// RDY_server_request_put         O     1 reg
// server_response_get            O   175 reg
// RDY_server_response_get        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// axi_read_ARREADY               I     1
// axi_read_RID                   I     4
// axi_read_RDATA                 I   128
// axi_read_RRESP                 I     2
// axi_read_RLAST                 I     1
// axi_read_RVALID                I     1
// axi_write_AWREADY              I     1
// axi_write_WREADY               I     1
// axi_write_BID                  I     4
// axi_write_BRESP                I     2
// axi_write_BVALID               I     1
// server_request_put             I   198 reg
// EN_server_request_put          I     1
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkAxiConn(CLK,
		 RST_N,

		 axi_read_ARID,

		 axi_read_ARADDR,

		 axi_read_ARLEN,

		 axi_read_ARSIZE,

		 axi_read_ARBURST,

		 axi_read_ARLOCK,

		 axi_read_ARCACHE,

		 axi_read_ARPROT,

		 axi_read_ARVALID,

		 axi_read_ARREADY,

		 axi_read_RREADY,

		 axi_read_RID,

		 axi_read_RDATA,

		 axi_read_RRESP,

		 axi_read_RLAST,

		 axi_read_RVALID,

		 axi_write_AWID,

		 axi_write_AWADDR,

		 axi_write_AWLEN,

		 axi_write_AWSIZE,

		 axi_write_AWBURST,

		 axi_write_AWLOCK,

		 axi_write_AWCACHE,

		 axi_write_AWPROT,

		 axi_write_AWVALID,

		 axi_write_AWREADY,

		 axi_write_WID,

		 axi_write_WDATA,

		 axi_write_WSTRB,

		 axi_write_WLAST,

		 axi_write_WVALID,

		 axi_write_WREADY,

		 axi_write_BREADY,

		 axi_write_BID,

		 axi_write_BRESP,

		 axi_write_BVALID,

		 server_request_put,
		 EN_server_request_put,
		 RDY_server_request_put,

		 EN_server_response_get,
		 server_response_get,
		 RDY_server_response_get);
  input  CLK;
  input  RST_N;

  // value method axi_read_bus_arID
  output [3 : 0] axi_read_ARID;

  // value method axi_read_bus_arADDR
  output [31 : 0] axi_read_ARADDR;

  // value method axi_read_bus_arLEN
  output [3 : 0] axi_read_ARLEN;

  // value method axi_read_bus_arSIZE
  output [2 : 0] axi_read_ARSIZE;

  // value method axi_read_bus_arBURST
  output [1 : 0] axi_read_ARBURST;

  // value method axi_read_bus_arLOCK
  output [1 : 0] axi_read_ARLOCK;

  // value method axi_read_bus_arCACHE
  output [3 : 0] axi_read_ARCACHE;

  // value method axi_read_bus_arPROT
  output [2 : 0] axi_read_ARPROT;

  // value method axi_read_bus_arVALID
  output axi_read_ARVALID;

  // action method axi_read_bus_arREADY
  input  axi_read_ARREADY;

  // value method axi_read_bus_rREADY
  output axi_read_RREADY;

  // action method axi_read_bus_rID
  input  [3 : 0] axi_read_RID;

  // action method axi_read_bus_rDATA
  input  [127 : 0] axi_read_RDATA;

  // action method axi_read_bus_rRESP
  input  [1 : 0] axi_read_RRESP;

  // action method axi_read_bus_rLAST
  input  axi_read_RLAST;

  // action method axi_read_bus_rVALID
  input  axi_read_RVALID;

  // value method axi_write_bus_awID
  output [3 : 0] axi_write_AWID;

  // value method axi_write_bus_awADDR
  output [31 : 0] axi_write_AWADDR;

  // value method axi_write_bus_awLEN
  output [3 : 0] axi_write_AWLEN;

  // value method axi_write_bus_awSIZE
  output [2 : 0] axi_write_AWSIZE;

  // value method axi_write_bus_awBURST
  output [1 : 0] axi_write_AWBURST;

  // value method axi_write_bus_awLOCK
  output [1 : 0] axi_write_AWLOCK;

  // value method axi_write_bus_awCACHE
  output [3 : 0] axi_write_AWCACHE;

  // value method axi_write_bus_awPROT
  output [2 : 0] axi_write_AWPROT;

  // value method axi_write_bus_awVALID
  output axi_write_AWVALID;

  // action method axi_write_bus_awREADY
  input  axi_write_AWREADY;

  // value method axi_write_bus_wID
  output [3 : 0] axi_write_WID;

  // value method axi_write_bus_wDATA
  output [127 : 0] axi_write_WDATA;

  // value method axi_write_bus_wSTRB
  output [15 : 0] axi_write_WSTRB;

  // value method axi_write_bus_wLAST
  output axi_write_WLAST;

  // value method axi_write_bus_wVALID
  output axi_write_WVALID;

  // action method axi_write_bus_wREADY
  input  axi_write_WREADY;

  // value method axi_write_bus_bREADY
  output axi_write_BREADY;

  // action method axi_write_bus_bID
  input  [3 : 0] axi_write_BID;

  // action method axi_write_bus_bRESP
  input  [1 : 0] axi_write_BRESP;

  // action method axi_write_bus_bVALID
  input  axi_write_BVALID;

  // action method server_request_put
  input  [197 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [174 : 0] server_response_get;
  output RDY_server_response_get;

  // signals for module outputs
  wire [174 : 0] server_response_get;
  wire [127 : 0] axi_write_WDATA;
  wire [31 : 0] axi_read_ARADDR, axi_write_AWADDR;
  wire [15 : 0] axi_write_WSTRB;
  wire [3 : 0] axi_read_ARCACHE,
	       axi_read_ARID,
	       axi_read_ARLEN,
	       axi_write_AWCACHE,
	       axi_write_AWID,
	       axi_write_AWLEN,
	       axi_write_WID;
  wire [2 : 0] axi_read_ARPROT,
	       axi_read_ARSIZE,
	       axi_write_AWPROT,
	       axi_write_AWSIZE;
  wire [1 : 0] axi_read_ARBURST,
	       axi_read_ARLOCK,
	       axi_write_AWBURST,
	       axi_write_AWLOCK;
  wire RDY_server_request_put,
       RDY_server_response_get,
       axi_read_ARVALID,
       axi_read_RREADY,
       axi_write_AWVALID,
       axi_write_BREADY,
       axi_write_WLAST,
       axi_write_WVALID;

  // inlined wires
  wire [228 : 0] axi_reader_r_master_0_fifo_rx_rw_enq$wget,
		 axi_writer_w_master_0_fifo_rx_rw_enq$wget;
  wire [162 : 0] axi_reader_r_master_0_fifo_tx_rw_enq$wget,
		 axi_writer_w_master_0_fifo_tx_rw_enq$wget;
  wire [148 : 0] axi_writer_w_master_0_wr_data_fifo_data_wire$wget,
		 axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$wget;
  wire [134 : 0] axi_reader_r_master_0_rd_resp_fifo_data_wire$wget;
  wire [53 : 0] axi_reader_r_master_0_rd_addr_fifo_data_wire$wget,
		axi_reader_r_master_0_rd_addr_fifo_fifof_rw_enq$wget,
		axi_writer_w_master_0_wr_addr_fifo_data_wire$wget,
		axi_writer_w_master_0_wr_addr_fifo_fifof_rw_enq$wget;
  wire [5 : 0] axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$wget;
  wire axi_reader_r_master_0_rd_addr_fifo_data_wire$whas,
       axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas,
       axi_writer_w_master_0_wr_addr_fifo_data_wire$whas,
       axi_writer_w_master_0_wr_data_fifo_data_wire$whas,
       axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas,
       axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$whas,
       read_dec$whas,
       transaction_end$whas,
       transaction_start$whas;

  // register axi_reader_r_master_0_count
  reg [9 : 0] axi_reader_r_master_0_count;
  wire [9 : 0] axi_reader_r_master_0_count$D_IN;
  wire axi_reader_r_master_0_count$EN;

  // register axi_reader_r_master_0_fifo_rx_taggedReg
  reg [229 : 0] axi_reader_r_master_0_fifo_rx_taggedReg;
  wire [229 : 0] axi_reader_r_master_0_fifo_rx_taggedReg$D_IN;
  wire axi_reader_r_master_0_fifo_rx_taggedReg$EN;

  // register axi_reader_r_master_0_fifo_tx_taggedReg
  reg [163 : 0] axi_reader_r_master_0_fifo_tx_taggedReg;
  wire [163 : 0] axi_reader_r_master_0_fifo_tx_taggedReg$D_IN;
  wire axi_reader_r_master_0_fifo_tx_taggedReg$EN;

  // register axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg
  reg [54 : 0] axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg;
  wire [54 : 0] axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$D_IN;
  wire axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$EN;

  // register axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg
  reg [135 : 0] axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg;
  wire [135 : 0] axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$D_IN;
  wire axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$EN;

  // register axi_writer_w_master_0_count
  reg [9 : 0] axi_writer_w_master_0_count;
  wire [9 : 0] axi_writer_w_master_0_count$D_IN;
  wire axi_writer_w_master_0_count$EN;

  // register axi_writer_w_master_0_descriptor
  reg [227 : 0] axi_writer_w_master_0_descriptor;
  wire [227 : 0] axi_writer_w_master_0_descriptor$D_IN;
  wire axi_writer_w_master_0_descriptor$EN;

  // register axi_writer_w_master_0_fifo_rx_taggedReg
  reg [229 : 0] axi_writer_w_master_0_fifo_rx_taggedReg;
  wire [229 : 0] axi_writer_w_master_0_fifo_rx_taggedReg$D_IN;
  wire axi_writer_w_master_0_fifo_rx_taggedReg$EN;

  // register axi_writer_w_master_0_fifo_tx_taggedReg
  reg [163 : 0] axi_writer_w_master_0_fifo_tx_taggedReg;
  wire [163 : 0] axi_writer_w_master_0_fifo_tx_taggedReg$D_IN;
  wire axi_writer_w_master_0_fifo_tx_taggedReg$EN;

  // register axi_writer_w_master_0_saved_data
  reg [148 : 0] axi_writer_w_master_0_saved_data;
  wire [148 : 0] axi_writer_w_master_0_saved_data$D_IN;
  wire axi_writer_w_master_0_saved_data$EN;

  // register axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg
  reg [54 : 0] axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg;
  wire [54 : 0] axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$D_IN;
  wire axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$EN;

  // register axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg
  reg [149 : 0] axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg;
  wire [149 : 0] axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$D_IN;
  wire axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$EN;

  // register axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg
  reg [6 : 0] axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg;
  wire [6 : 0] axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$D_IN;
  wire axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$EN;

  // register read_offset
  reg [3 : 0] read_offset;
  wire [3 : 0] read_offset$D_IN;
  wire read_offset$EN;

  // register reads_active
  reg [7 : 0] reads_active;
  wire [7 : 0] reads_active$D_IN;
  wire reads_active$EN;

  // register state
  reg [1 : 0] state;
  wire [1 : 0] state$D_IN;
  wire state$EN;

  // register timestamp
  reg [63 : 0] timestamp;
  wire [63 : 0] timestamp$D_IN;
  wire timestamp$EN;

  // register transaction_active
  reg transaction_active;
  wire transaction_active$D_IN, transaction_active$EN;

  // register used_cycles
  reg [63 : 0] used_cycles;
  wire [63 : 0] used_cycles$D_IN;
  wire used_cycles$EN;

  // register writes_active
  reg [7 : 0] writes_active;
  wire [7 : 0] writes_active$D_IN;
  wire writes_active$EN;

  // ports of submodule axi_reader_data_fifo
  wire [127 : 0] axi_reader_data_fifo$D_IN, axi_reader_data_fifo$D_OUT;
  wire axi_reader_data_fifo$CLR,
       axi_reader_data_fifo$DEQ,
       axi_reader_data_fifo$EMPTY_N,
       axi_reader_data_fifo$ENQ,
       axi_reader_data_fifo$FULL_N;

  // ports of submodule axi_writer_write_done
  wire axi_writer_write_done$CLR,
       axi_writer_write_done$DEQ,
       axi_writer_write_done$D_IN,
       axi_writer_write_done$EMPTY_N,
       axi_writer_write_done$ENQ,
       axi_writer_write_done$FULL_N;

  // ports of submodule control_fifo
  wire [49 : 0] control_fifo$D_IN, control_fifo$D_OUT;
  wire control_fifo$CLR,
       control_fifo$DEQ,
       control_fifo$EMPTY_N,
       control_fifo$ENQ,
       control_fifo$FULL_N;

  // ports of submodule from_mem_fifo
  reg [174 : 0] from_mem_fifo$D_IN;
  wire [174 : 0] from_mem_fifo$D_OUT;
  wire from_mem_fifo$CLR,
       from_mem_fifo$DEQ,
       from_mem_fifo$EMPTY_N,
       from_mem_fifo$ENQ,
       from_mem_fifo$FULL_N;

  // ports of submodule to_mem_fifo
  wire [197 : 0] to_mem_fifo$D_IN, to_mem_fifo$D_OUT;
  wire to_mem_fifo$CLR,
       to_mem_fifo$DEQ,
       to_mem_fifo$EMPTY_N,
       to_mem_fifo$ENQ,
       to_mem_fifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_axi_reader_r_master_0_grab_response,
       CAN_FIRE_RL_axi_writer_w_master_0_grab_response,
       WILL_FIRE_RL_axi_reader_r_master_0_fifo_rx_rule_enq,
       WILL_FIRE_RL_axi_reader_r_master_0_fifo_tx_rule_enq,
       WILL_FIRE_RL_axi_reader_r_master_0_rd_addr_fifo_fifof_rule_enq,
       WILL_FIRE_RL_axi_reader_r_master_0_rd_resp_fifo_fifof_rule_enq,
       WILL_FIRE_RL_axi_reader_r_master_0_start_read,
       WILL_FIRE_RL_axi_reader_r_master_0_start_write,
       WILL_FIRE_RL_axi_writer_w_master_0_data_write,
       WILL_FIRE_RL_axi_writer_w_master_0_fifo_rx_rule_enq,
       WILL_FIRE_RL_axi_writer_w_master_0_fifo_tx_rule_enq,
       WILL_FIRE_RL_axi_writer_w_master_0_start_read,
       WILL_FIRE_RL_axi_writer_w_master_0_start_write,
       WILL_FIRE_RL_axi_writer_w_master_0_wr_addr_fifo_fifof_rule_enq,
       WILL_FIRE_RL_axi_writer_w_master_0_wr_data_fifo_fifof_rule_enq,
       WILL_FIRE_RL_axi_writer_w_master_0_wr_resp_fifo_fifof_rule_enq,
       WILL_FIRE_RL_r_inc_read,
       WILL_FIRE_RL_r_inc_write,
       WILL_FIRE_RL_read_complete,
       WILL_FIRE_RL_start_command,
       WILL_FIRE_RL_start_read,
       WILL_FIRE_RL_start_write,
       WILL_FIRE_RL_write_complete;

  // inputs to muxes for submodule ports
  wire [229 : 0] MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_1,
		 MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_2,
		 MUX_axi_writer_w_master_0_fifo_rx_taggedReg$write_1__VAL_1;
  wire [227 : 0] MUX_axi_writer_w_master_0_descriptor$write_1__VAL_1,
		 MUX_axi_writer_w_master_0_descriptor$write_1__VAL_2;
  wire [174 : 0] MUX_from_mem_fifo$enq_1__VAL_1,
		 MUX_from_mem_fifo$enq_1__VAL_2,
		 MUX_from_mem_fifo$enq_1__VAL_3;
  wire [163 : 0] MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_1,
		 MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_2,
		 MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__VAL_1;
  wire [149 : 0] MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__VAL_1,
		 MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__VAL_2;
  wire [148 : 0] MUX_axi_writer_w_master_0_saved_data$write_1__VAL_1,
		 MUX_axi_writer_w_master_0_saved_data$write_1__VAL_2;
  wire [135 : 0] MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__VAL_1,
		 MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__VAL_2;
  wire [54 : 0] MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_1,
		MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_2,
		MUX_axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$write_1__VAL_1;
  wire [49 : 0] MUX_control_fifo$enq_1__VAL_1, MUX_control_fifo$enq_1__VAL_2;
  wire [9 : 0] MUX_axi_writer_w_master_0_count$write_1__VAL_2;
  wire [7 : 0] MUX_reads_active$write_1__VAL_1,
	       MUX_reads_active$write_1__VAL_2,
	       MUX_writes_active$write_1__VAL_1,
	       MUX_writes_active$write_1__VAL_2;
  wire [6 : 0] MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__VAL_1,
	       MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__VAL_2;
  wire MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__SEL_2,
       MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__SEL_2,
       MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__SEL_2,
       MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2,
       MUX_axi_writer_w_master_0_fifo_rx_taggedReg$write_1__SEL_2,
       MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__SEL_2,
       MUX_axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$write_1__SEL_2,
       MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__SEL_2,
       MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h35846, v__h39472;
  reg [15 : 0] wr_data_strb__h20095, wr_data_strb__h3811;
  reg [2 : 0] x__h38786, x__h4545;
  reg [1 : 0] CASE_IF_WILL_FIRE_RL_start_read_THEN_axi_reade_ETC__q3,
	      CASE_IF_axi_reader_r_master_0_rd_resp_fifo_fif_ETC__q4,
	      CASE_IF_axi_writer_w_master_0_fifo_rx_rw_enq_w_ETC__q1,
	      CASE_IF_axi_writer_w_master_0_wr_resp_fifo_fif_ETC__q2;
  wire [127 : 0] wr_data_data__h20094,
		 wr_data_data__h3810,
		 x_data__h39111,
		 x_data__h41667;
  wire [45 : 0] IF_IF_axi_reader_r_master_0_fifo_rx_rw_enq_wha_ETC___d799,
		IF_IF_axi_writer_w_master_0_fifo_rx_rw_enq_wha_ETC___d171;
  wire [31 : 0] _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997,
		_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998,
		a2__h40386,
		addr___1__h20421,
		addr___1__h5012,
		addr__h20392,
		addr__h4873,
		log_length__h20418,
		log_length__h5009,
		log_size__h20417,
		log_size__h5008,
		mask__h20420,
		mask__h5011,
		total__h20419,
		total__h5010,
		value__h4038,
		x__h20433,
		x__h20441,
		x__h5024,
		x__h5034,
		x_addr__h20395,
		x_addr__h4876,
		y__h19960,
		y__h20434,
		y__h35353,
		y__h5025;
  wire [27 : 0] p_address__h42236;
  wire [15 : 0] mask__h20195,
		mask__h3989,
		out___1__h20196,
		out___1__h3990,
		tlm_byte_enable__h3977,
		x__h20208,
		x__h4002;
  wire [9 : 0] IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999,
	       value__h38750,
	       value__h4509;
  wire [4 : 0] value__h11803,
	       value__h19138,
	       value__h20442,
	       value__h27198,
	       value__h34531,
	       value__h5035,
	       y__h20210,
	       y__h4004;
  wire [3 : 0] IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d972,
	       addr_cmd_id__h38535,
	       value__h38803,
	       wr_data_id__h3809,
	       x__h35705,
	       x__h39331,
	       x__h42160;
  wire [1 : 0] IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1115,
	       IF_axi_reader_r_master_0_rd_resp_fifo_fifof_rw_ETC___d1117,
	       IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1110,
	       IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1111,
	       IF_axi_writer_w_master_0_wr_resp_fifo_fifof_rw_ETC___d1114;
  wire IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1098,
       IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1093,
       read_offset_19_EQ_control_fifo_first__16_BITS__ETC___d1221;

  // value method axi_read_bus_arID
  assign axi_read_ARID =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[53:50] :
	       4'd0 ;

  // value method axi_read_bus_arADDR
  assign axi_read_ARADDR =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[31:0] :
	       32'd0 ;

  // value method axi_read_bus_arLEN
  assign axi_read_ARLEN =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[49:46] :
	       4'd0 ;

  // value method axi_read_bus_arSIZE
  assign axi_read_ARSIZE =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[45:43] :
	       3'd0 ;

  // value method axi_read_bus_arBURST
  assign axi_read_ARBURST =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[42:41] :
	       2'd0 ;

  // value method axi_read_bus_arLOCK
  assign axi_read_ARLOCK =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[40:39] :
	       2'd0 ;

  // value method axi_read_bus_arCACHE
  assign axi_read_ARCACHE =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[38:35] :
	       4'd0 ;

  // value method axi_read_bus_arPROT
  assign axi_read_ARPROT =
	     axi_reader_r_master_0_rd_addr_fifo_data_wire$whas ?
	       axi_reader_r_master_0_rd_addr_fifo_data_wire$wget[34:32] :
	       3'd0 ;

  // value method axi_read_bus_arVALID
  assign axi_read_ARVALID =
	     axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg[54] ||
	     WILL_FIRE_RL_axi_reader_r_master_0_start_read ;

  // value method axi_read_bus_rREADY
  assign axi_read_RREADY =
	     !axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg[135] ;

  // value method axi_write_bus_awID
  assign axi_write_AWID =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[53:50] :
	       4'd0 ;

  // value method axi_write_bus_awADDR
  assign axi_write_AWADDR =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[31:0] :
	       32'd0 ;

  // value method axi_write_bus_awLEN
  assign axi_write_AWLEN =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[49:46] :
	       4'd0 ;

  // value method axi_write_bus_awSIZE
  assign axi_write_AWSIZE =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[45:43] :
	       3'd0 ;

  // value method axi_write_bus_awBURST
  assign axi_write_AWBURST =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[42:41] :
	       2'd0 ;

  // value method axi_write_bus_awLOCK
  assign axi_write_AWLOCK =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[40:39] :
	       2'd0 ;

  // value method axi_write_bus_awCACHE
  assign axi_write_AWCACHE =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[38:35] :
	       4'd0 ;

  // value method axi_write_bus_awPROT
  assign axi_write_AWPROT =
	     axi_writer_w_master_0_wr_addr_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_addr_fifo_data_wire$wget[34:32] :
	       3'd0 ;

  // value method axi_write_bus_awVALID
  assign axi_write_AWVALID =
	     axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg[54] ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ;

  // value method axi_write_bus_wID
  assign axi_write_WID =
	     axi_writer_w_master_0_wr_data_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_data_fifo_data_wire$wget[148:145] :
	       4'd0 ;

  // value method axi_write_bus_wDATA
  assign axi_write_WDATA =
	     axi_writer_w_master_0_wr_data_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_data_fifo_data_wire$wget[144:17] :
	       128'd0 ;

  // value method axi_write_bus_wSTRB
  assign axi_write_WSTRB =
	     axi_writer_w_master_0_wr_data_fifo_data_wire$whas ?
	       axi_writer_w_master_0_wr_data_fifo_data_wire$wget[16:1] :
	       16'd0 ;

  // value method axi_write_bus_wLAST
  assign axi_write_WLAST =
	     axi_writer_w_master_0_wr_data_fifo_data_wire$whas &&
	     axi_writer_w_master_0_wr_data_fifo_data_wire$wget[0] ;

  // value method axi_write_bus_wVALID
  assign axi_write_WVALID =
	     axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[149] ||
	     axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas ;

  // value method axi_write_bus_bREADY
  assign axi_write_BREADY =
	     !axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg[6] ;

  // action method server_request_put
  assign RDY_server_request_put = to_mem_fifo$FULL_N ;

  // actionvalue method server_response_get
  assign server_response_get = from_mem_fifo$D_OUT ;
  assign RDY_server_response_get = from_mem_fifo$EMPTY_N ;

  // submodule axi_reader_data_fifo
  FIFO2 #(.width(32'd128),
	  .guarded(32'd1)) axi_reader_data_fifo(.RST_N(RST_N),
						.CLK(CLK),
						.D_IN(axi_reader_data_fifo$D_IN),
						.ENQ(axi_reader_data_fifo$ENQ),
						.DEQ(axi_reader_data_fifo$DEQ),
						.CLR(axi_reader_data_fifo$CLR),
						.D_OUT(axi_reader_data_fifo$D_OUT),
						.FULL_N(axi_reader_data_fifo$FULL_N),
						.EMPTY_N(axi_reader_data_fifo$EMPTY_N));

  // submodule axi_writer_write_done
  FIFO2 #(.width(32'd1), .guarded(32'd1)) axi_writer_write_done(.RST_N(RST_N),
								.CLK(CLK),
								.D_IN(axi_writer_write_done$D_IN),
								.ENQ(axi_writer_write_done$ENQ),
								.DEQ(axi_writer_write_done$DEQ),
								.CLR(axi_writer_write_done$CLR),
								.D_OUT(),
								.FULL_N(axi_writer_write_done$FULL_N),
								.EMPTY_N(axi_writer_write_done$EMPTY_N));

  // submodule control_fifo
  FIFO2 #(.width(32'd50), .guarded(32'd1)) control_fifo(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(control_fifo$D_IN),
							.ENQ(control_fifo$ENQ),
							.DEQ(control_fifo$DEQ),
							.CLR(control_fifo$CLR),
							.D_OUT(control_fifo$D_OUT),
							.FULL_N(control_fifo$FULL_N),
							.EMPTY_N(control_fifo$EMPTY_N));

  // submodule from_mem_fifo
  FIFO2 #(.width(32'd175), .guarded(32'd1)) from_mem_fifo(.RST_N(RST_N),
							  .CLK(CLK),
							  .D_IN(from_mem_fifo$D_IN),
							  .ENQ(from_mem_fifo$ENQ),
							  .DEQ(from_mem_fifo$DEQ),
							  .CLR(from_mem_fifo$CLR),
							  .D_OUT(from_mem_fifo$D_OUT),
							  .FULL_N(from_mem_fifo$FULL_N),
							  .EMPTY_N(from_mem_fifo$EMPTY_N));

  // submodule to_mem_fifo
  FIFO2 #(.width(32'd198), .guarded(32'd1)) to_mem_fifo(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(to_mem_fifo$D_IN),
							.ENQ(to_mem_fifo$ENQ),
							.DEQ(to_mem_fifo$DEQ),
							.CLR(to_mem_fifo$CLR),
							.D_OUT(to_mem_fifo$D_OUT),
							.FULL_N(to_mem_fifo$FULL_N),
							.EMPTY_N(to_mem_fifo$EMPTY_N));

  // rule RL_start_write
  assign WILL_FIRE_RL_start_write =
	     to_mem_fifo$EMPTY_N &&
	     !axi_writer_w_master_0_fifo_rx_taggedReg[229] &&
	     control_fifo$FULL_N &&
	     reads_active == 8'd0 &&
	     to_mem_fifo$D_OUT[67:52] != 16'd0 &&
	     to_mem_fifo$D_OUT[197:196] != 2'd3 ;

  // rule RL_axi_writer_w_master_0_start_write
  assign WILL_FIRE_RL_axi_writer_w_master_0_start_write =
	     (axi_writer_w_master_0_fifo_rx_taggedReg[229] ||
	      WILL_FIRE_RL_start_write) &&
	     !axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg[54] &&
	     !axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[149] &&
	     IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1093 &&
	     IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1110 ==
	     2'd1 ;

  // rule RL_axi_writer_w_master_0_data_write
  assign WILL_FIRE_RL_axi_writer_w_master_0_data_write =
	     !axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[149] &&
	     (WILL_FIRE_RL_start_write ?
		axi_writer_w_master_0_fifo_rx_rw_enq$wget[228] :
		axi_writer_w_master_0_fifo_rx_taggedReg[229] &&
		axi_writer_w_master_0_fifo_rx_taggedReg[228]) ;

  // rule RL_start_read
  assign WILL_FIRE_RL_start_read =
	     to_mem_fifo$EMPTY_N && control_fifo$FULL_N &&
	     !axi_reader_r_master_0_fifo_rx_taggedReg[229] &&
	     writes_active == 8'd0 &&
	     to_mem_fifo$D_OUT[67:52] == 16'd0 &&
	     to_mem_fifo$D_OUT[197:196] != 2'd3 ;

  // rule RL_axi_reader_r_master_0_start_read
  assign WILL_FIRE_RL_axi_reader_r_master_0_start_read =
	     (axi_reader_r_master_0_fifo_rx_taggedReg[229] ||
	      WILL_FIRE_RL_start_read) &&
	     !axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg[54] &&
	     IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1098 &&
	     IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1115 ==
	     2'd0 ;

  // rule RL_start_command
  assign WILL_FIRE_RL_start_command =
	     to_mem_fifo$EMPTY_N && from_mem_fifo$FULL_N &&
	     to_mem_fifo$D_OUT[197:196] == 2'd3 &&
	     reads_active == 8'd0 &&
	     writes_active == 8'd0 ;

  // rule RL_read_complete
  assign WILL_FIRE_RL_read_complete =
	     from_mem_fifo$FULL_N && control_fifo$EMPTY_N &&
	     axi_reader_data_fifo$EMPTY_N &&
	     control_fifo$D_OUT[49] ;

  // rule RL_r_inc_read
  assign WILL_FIRE_RL_r_inc_read = WILL_FIRE_RL_start_read && !read_dec$whas ;

  // rule RL_write_complete
  assign WILL_FIRE_RL_write_complete =
	     from_mem_fifo$FULL_N && control_fifo$EMPTY_N &&
	     axi_writer_write_done$EMPTY_N &&
	     !control_fifo$D_OUT[49] ;

  // rule RL_r_inc_write
  assign WILL_FIRE_RL_r_inc_write =
	     WILL_FIRE_RL_start_write && !WILL_FIRE_RL_write_complete ;

  // rule RL_axi_writer_w_master_0_start_read
  assign WILL_FIRE_RL_axi_writer_w_master_0_start_read =
	     (axi_writer_w_master_0_fifo_rx_taggedReg[229] ||
	      WILL_FIRE_RL_start_write) &&
	     IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1093 &&
	     IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1110 ==
	     2'd0 ;

  // rule RL_axi_writer_w_master_0_wr_addr_fifo_fifof_rule_enq
  assign WILL_FIRE_RL_axi_writer_w_master_0_wr_addr_fifo_fifof_rule_enq =
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write &&
	     !MUX_axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_writer_w_master_0_wr_data_fifo_fifof_rule_enq
  assign WILL_FIRE_RL_axi_writer_w_master_0_wr_data_fifo_fifof_rule_enq =
	     axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas &&
	     !MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_writer_w_master_0_grab_response
  assign CAN_FIRE_RL_axi_writer_w_master_0_grab_response =
	     !axi_writer_w_master_0_fifo_tx_taggedReg[163] &&
	     (axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg[6] ||
	      axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$whas) ;

  // rule RL_axi_writer_w_master_0_wr_resp_fifo_fifof_rule_enq
  assign WILL_FIRE_RL_axi_writer_w_master_0_wr_resp_fifo_fifof_rule_enq =
	     axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$whas &&
	     !MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_writer_w_master_0_fifo_rx_rule_enq
  assign WILL_FIRE_RL_axi_writer_w_master_0_fifo_rx_rule_enq =
	     WILL_FIRE_RL_start_write &&
	     !MUX_axi_writer_w_master_0_fifo_rx_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_writer_w_master_0_fifo_tx_rule_enq
  assign WILL_FIRE_RL_axi_writer_w_master_0_fifo_tx_rule_enq =
	     MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__SEL_2 &&
	     !MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_reader_r_master_0_start_write
  assign WILL_FIRE_RL_axi_reader_r_master_0_start_write =
	     (axi_reader_r_master_0_fifo_rx_taggedReg[229] ||
	      WILL_FIRE_RL_start_read) &&
	     IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1098 &&
	     IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1115 ==
	     2'd1 ;

  // rule RL_axi_reader_r_master_0_rd_addr_fifo_fifof_rule_enq
  assign WILL_FIRE_RL_axi_reader_r_master_0_rd_addr_fifo_fifof_rule_enq =
	     WILL_FIRE_RL_axi_reader_r_master_0_start_read &&
	     !MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_reader_r_master_0_grab_response
  assign CAN_FIRE_RL_axi_reader_r_master_0_grab_response =
	     !axi_reader_r_master_0_fifo_tx_taggedReg[163] &&
	     (axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg[135] ||
	      axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas) ;

  // rule RL_axi_reader_r_master_0_rd_resp_fifo_fifof_rule_enq
  assign WILL_FIRE_RL_axi_reader_r_master_0_rd_resp_fifo_fifof_rule_enq =
	     axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas &&
	     !MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_reader_r_master_0_fifo_rx_rule_enq
  assign WILL_FIRE_RL_axi_reader_r_master_0_fifo_rx_rule_enq =
	     WILL_FIRE_RL_start_read &&
	     !MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__SEL_2 ;

  // rule RL_axi_reader_r_master_0_fifo_tx_rule_enq
  assign WILL_FIRE_RL_axi_reader_r_master_0_fifo_tx_rule_enq =
	     MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2 &&
	     !MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__SEL_2 =
	     WILL_FIRE_RL_axi_reader_r_master_0_start_read ||
	     WILL_FIRE_RL_axi_reader_r_master_0_start_write ;
  assign MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__SEL_2 =
	     (axi_reader_r_master_0_fifo_tx_taggedReg[163] ||
	      MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2) &&
	     axi_reader_data_fifo$FULL_N ;
  assign MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__SEL_2 =
	     (axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg[54] ||
	      WILL_FIRE_RL_axi_reader_r_master_0_start_read) &&
	     axi_read_ARREADY ;
  assign MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2 =
	     CAN_FIRE_RL_axi_reader_r_master_0_grab_response &&
	     !WILL_FIRE_RL_axi_reader_r_master_0_start_write ;
  assign MUX_axi_writer_w_master_0_fifo_rx_taggedReg$write_1__SEL_2 =
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_read ;
  assign MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__SEL_2 =
	     (axi_writer_w_master_0_fifo_tx_taggedReg[163] ||
	      MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__SEL_2) &&
	     axi_writer_write_done$FULL_N ;
  assign MUX_axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$write_1__SEL_2 =
	     (axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg[54] ||
	      WILL_FIRE_RL_axi_writer_w_master_0_start_write) &&
	     axi_write_AWREADY ;
  assign MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__SEL_2 =
	     (axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[149] ||
	      axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas) &&
	     axi_write_WREADY ;
  assign MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__SEL_2 =
	     CAN_FIRE_RL_axi_writer_w_master_0_grab_response &&
	     !WILL_FIRE_RL_axi_writer_w_master_0_start_read ;
  assign MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_reader_r_master_0_fifo_rx_rw_enq$wget } ;
  assign MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_2 =
	     { 1'd0,
	       229'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_reader_r_master_0_fifo_tx_rw_enq$wget } ;
  assign MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_2 =
	     { 1'd0,
	       163'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_reader_r_master_0_rd_addr_fifo_fifof_rw_enq$wget } ;
  assign MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_2 =
	     { 1'd0,
	       54'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_reader_r_master_0_rd_resp_fifo_data_wire$wget } ;
  assign MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__VAL_2 =
	     { 1'd0,
	       135'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi_writer_w_master_0_count$write_1__VAL_2 =
	     axi_writer_w_master_0_count - 10'd1 ;
  assign MUX_axi_writer_w_master_0_descriptor$write_1__VAL_1 =
	     { IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1110,
	       WILL_FIRE_RL_start_write ?
		 axi_writer_w_master_0_fifo_rx_rw_enq$wget[225:224] :
		 axi_writer_w_master_0_fifo_rx_taggedReg[225:224],
	       x_addr__h4876,
	       WILL_FIRE_RL_start_write ?
		 axi_writer_w_master_0_fifo_rx_rw_enq$wget[191:0] :
		 axi_writer_w_master_0_fifo_rx_taggedReg[191:0] } ;
  assign MUX_axi_writer_w_master_0_descriptor$write_1__VAL_2 =
	     { axi_writer_w_master_0_descriptor[227:224],
	       x_addr__h20395,
	       axi_writer_w_master_0_descriptor[191:0] } ;
  assign MUX_axi_writer_w_master_0_fifo_rx_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_writer_w_master_0_fifo_rx_rw_enq$wget } ;
  assign MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_writer_w_master_0_fifo_tx_rw_enq$wget } ;
  assign MUX_axi_writer_w_master_0_saved_data$write_1__VAL_1 =
	     { axi_writer_w_master_0_saved_data[148:145],
	       wr_data_data__h20094,
	       wr_data_strb__h20095,
	       axi_writer_w_master_0_count == 10'd1 } ;
  assign MUX_axi_writer_w_master_0_saved_data$write_1__VAL_2 =
	     { wr_data_id__h3809,
	       wr_data_data__h3810,
	       wr_data_strb__h3811,
	       IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999 ==
	       10'd1 } ;
  assign MUX_axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_writer_w_master_0_wr_addr_fifo_fifof_rw_enq$wget } ;
  assign MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$wget } ;
  assign MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__VAL_2 =
	     { 1'd0,
	       149'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__VAL_1 =
	     { 1'd1, axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$wget } ;
  assign MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__VAL_2 =
	     { 1'd0, 6'bxxxxxx /* unspecified value */  } ;
  assign MUX_control_fifo$enq_1__VAL_1 =
	     { 2'd0, to_mem_fifo$D_OUT[51:8], 4'd0 } ;
  assign MUX_control_fifo$enq_1__VAL_2 =
	     { 1'd1,
	       to_mem_fifo$D_OUT[197:196] == 2'd1,
	       to_mem_fifo$D_OUT[51:8],
	       to_mem_fifo$D_OUT[3:0] } ;
  assign MUX_from_mem_fifo$enq_1__VAL_1 =
	     { 3'd4, x_data__h41667, 28'd0, to_mem_fifo$D_OUT[23:8] } ;
  assign MUX_from_mem_fifo$enq_1__VAL_2 =
	     { control_fifo$D_OUT[48] ? 3'd2 : 3'd0,
	       axi_reader_data_fifo$D_OUT,
	       p_address__h42236,
	       control_fifo$D_OUT[19:4] } ;
  assign MUX_from_mem_fifo$enq_1__VAL_3 =
	     { 131'h300000000000000000000000000000000,
	       control_fifo$D_OUT[47:4] } ;
  assign MUX_reads_active$write_1__VAL_1 = reads_active + 8'd1 ;
  assign MUX_reads_active$write_1__VAL_2 = reads_active - 8'd1 ;
  assign MUX_writes_active$write_1__VAL_1 = writes_active + 8'd1 ;
  assign MUX_writes_active$write_1__VAL_2 = writes_active - 8'd1 ;

  // inlined wires
  assign axi_writer_w_master_0_wr_addr_fifo_fifof_rw_enq$wget =
	     { wr_data_id__h3809,
	       value__h4509[3:0],
	       IF_IF_axi_writer_w_master_0_fifo_rx_rw_enq_wha_ETC___d171 } ;
  assign axi_writer_w_master_0_wr_addr_fifo_data_wire$wget =
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ?
	       axi_writer_w_master_0_wr_addr_fifo_fifof_rw_enq$wget :
	       axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg[53:0] ;
  assign axi_writer_w_master_0_wr_addr_fifo_data_wire$whas =
	     axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg[54] ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ;
  assign axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$wget =
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ?
	       MUX_axi_writer_w_master_0_saved_data$write_1__VAL_1 :
	       MUX_axi_writer_w_master_0_saved_data$write_1__VAL_2 ;
  assign axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas =
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ;
  assign axi_writer_w_master_0_wr_data_fifo_data_wire$wget =
	     axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas ?
	       axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$wget :
	       axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[148:0] ;
  assign axi_writer_w_master_0_wr_data_fifo_data_wire$whas =
	     axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[149] ||
	     axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas ;
  assign axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$wget =
	     { axi_write_BID, axi_write_BRESP } ;
  assign axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$whas =
	     !axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg[6] &&
	     axi_write_BVALID ;
  assign axi_writer_w_master_0_fifo_rx_rw_enq$wget =
	     { 5'd4,
	       a2__h40386,
	       to_mem_fifo$D_OUT[195:68],
	       10'd1,
	       to_mem_fifo$D_OUT[67:52],
	       38'h0F00000000 } ;
  assign axi_writer_w_master_0_fifo_tx_rw_enq$wget =
	     { 130'h100000000000000000000000000000000,
	       CASE_IF_axi_writer_w_master_0_wr_resp_fifo_fif_ETC__q2,
	       14'd0,
	       x__h35705,
	       13'd0 } ;
  assign axi_reader_r_master_0_rd_addr_fifo_fifof_rw_enq$wget =
	     { addr_cmd_id__h38535,
	       value__h38750[3:0],
	       IF_IF_axi_reader_r_master_0_fifo_rx_rw_enq_wha_ETC___d799 } ;
  assign axi_reader_r_master_0_rd_addr_fifo_data_wire$wget =
	     WILL_FIRE_RL_axi_reader_r_master_0_start_read ?
	       axi_reader_r_master_0_rd_addr_fifo_fifof_rw_enq$wget :
	       axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg[53:0] ;
  assign axi_reader_r_master_0_rd_addr_fifo_data_wire$whas =
	     axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg[54] ||
	     WILL_FIRE_RL_axi_reader_r_master_0_start_read ;
  assign axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas =
	     !axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg[135] &&
	     axi_read_RVALID ;
  assign axi_reader_r_master_0_fifo_rx_rw_enq$wget =
	     { 5'd0,
	       a2__h40386,
	       128'd0,
	       { 6'd0, to_mem_fifo$D_OUT[3:0] } + 10'd1,
	       54'h3FFFCF00000000 } ;
  assign axi_reader_r_master_0_fifo_tx_rw_enq$wget =
	     { 2'd0,
	       x_data__h39111,
	       CASE_IF_axi_reader_r_master_0_rd_resp_fifo_fif_ETC__q4,
	       14'd0,
	       x__h39331,
	       13'd0 } ;
  assign read_dec$whas =
	     WILL_FIRE_RL_read_complete &&
	     read_offset_19_EQ_control_fifo_first__16_BITS__ETC___d1221 ;
  assign transaction_start$whas =
	     WILL_FIRE_RL_start_read && reads_active == 8'd0 ||
	     WILL_FIRE_RL_start_write && writes_active == 8'd0 ;
  assign transaction_end$whas =
	     WILL_FIRE_RL_read_complete &&
	     read_offset_19_EQ_control_fifo_first__16_BITS__ETC___d1221 &&
	     reads_active == 8'd1 &&
	     !WILL_FIRE_RL_start_read ||
	     WILL_FIRE_RL_write_complete && writes_active == 8'd1 &&
	     !WILL_FIRE_RL_start_write ;
  assign axi_reader_r_master_0_rd_resp_fifo_data_wire$wget =
	     { axi_read_RID,
	       axi_read_RDATA,
	       axi_read_RRESP,
	       axi_read_RLAST } ;

  // register axi_reader_r_master_0_count
  assign axi_reader_r_master_0_count$D_IN = 10'h0 ;
  assign axi_reader_r_master_0_count$EN = 1'b0 ;

  // register axi_reader_r_master_0_fifo_rx_taggedReg
  assign axi_reader_r_master_0_fifo_rx_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_reader_r_master_0_fifo_rx_rule_enq ?
	       MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_2 ;
  assign axi_reader_r_master_0_fifo_rx_taggedReg$EN =
	     WILL_FIRE_RL_axi_reader_r_master_0_fifo_rx_rule_enq ||
	     WILL_FIRE_RL_axi_reader_r_master_0_start_read ||
	     WILL_FIRE_RL_axi_reader_r_master_0_start_write ;

  // register axi_reader_r_master_0_fifo_tx_taggedReg
  assign axi_reader_r_master_0_fifo_tx_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_reader_r_master_0_fifo_tx_rule_enq ?
	       MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_2 ;
  assign axi_reader_r_master_0_fifo_tx_taggedReg$EN =
	     WILL_FIRE_RL_axi_reader_r_master_0_fifo_tx_rule_enq ||
	     (axi_reader_r_master_0_fifo_tx_taggedReg[163] ||
	      MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2) &&
	     axi_reader_data_fifo$FULL_N ;

  // register axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg
  assign axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_reader_r_master_0_rd_addr_fifo_fifof_rule_enq ?
	       MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_2 ;
  assign axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$EN =
	     WILL_FIRE_RL_axi_reader_r_master_0_rd_addr_fifo_fifof_rule_enq ||
	     (axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg[54] ||
	      WILL_FIRE_RL_axi_reader_r_master_0_start_read) &&
	     axi_read_ARREADY ;

  // register axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg
  assign axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_reader_r_master_0_rd_resp_fifo_fifof_rule_enq ?
	       MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__VAL_2 ;
  assign axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$EN =
	     WILL_FIRE_RL_axi_reader_r_master_0_rd_resp_fifo_fifof_rule_enq ||
	     CAN_FIRE_RL_axi_reader_r_master_0_grab_response &&
	     !WILL_FIRE_RL_axi_reader_r_master_0_start_write ;

  // register axi_writer_w_master_0_count
  assign axi_writer_w_master_0_count$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ?
	       value__h4509 :
	       MUX_axi_writer_w_master_0_count$write_1__VAL_2 ;
  assign axi_writer_w_master_0_count$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ;

  // register axi_writer_w_master_0_descriptor
  assign axi_writer_w_master_0_descriptor$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ?
	       MUX_axi_writer_w_master_0_descriptor$write_1__VAL_1 :
	       MUX_axi_writer_w_master_0_descriptor$write_1__VAL_2 ;
  assign axi_writer_w_master_0_descriptor$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ;

  // register axi_writer_w_master_0_fifo_rx_taggedReg
  assign axi_writer_w_master_0_fifo_rx_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_fifo_rx_rule_enq ?
	       MUX_axi_writer_w_master_0_fifo_rx_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_fifo_rx_taggedReg$write_1__VAL_2 ;
  assign axi_writer_w_master_0_fifo_rx_taggedReg$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_fifo_rx_rule_enq ||
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_write ||
	     WILL_FIRE_RL_axi_writer_w_master_0_start_read ;

  // register axi_writer_w_master_0_fifo_tx_taggedReg
  assign axi_writer_w_master_0_fifo_tx_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_fifo_tx_rule_enq ?
	       MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__VAL_2 ;
  assign axi_writer_w_master_0_fifo_tx_taggedReg$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_fifo_tx_rule_enq ||
	     (axi_writer_w_master_0_fifo_tx_taggedReg[163] ||
	      MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__SEL_2) &&
	     axi_writer_write_done$FULL_N ;

  // register axi_writer_w_master_0_saved_data
  assign axi_writer_w_master_0_saved_data$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_data_write ?
	       MUX_axi_writer_w_master_0_saved_data$write_1__VAL_1 :
	       MUX_axi_writer_w_master_0_saved_data$write_1__VAL_2 ;
  assign axi_writer_w_master_0_saved_data$EN =
	     axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas ;

  // register axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg
  assign axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_wr_addr_fifo_fifof_rule_enq ?
	       MUX_axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$write_1__VAL_1 :
	       MUX_axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$write_1__VAL_2 ;
  assign axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_wr_addr_fifo_fifof_rule_enq ||
	     (axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg[54] ||
	      WILL_FIRE_RL_axi_writer_w_master_0_start_write) &&
	     axi_write_AWREADY ;

  // register axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg
  assign axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_wr_data_fifo_fifof_rule_enq ?
	       MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__VAL_1 :
	       MUX_axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$write_1__VAL_2 ;
  assign axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_wr_data_fifo_fifof_rule_enq ||
	     (axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg[149] ||
	      axi_writer_w_master_0_wr_data_fifo_fifof_rw_enq$whas) &&
	     axi_write_WREADY ;

  // register axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg
  assign axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$D_IN =
	     WILL_FIRE_RL_axi_writer_w_master_0_wr_resp_fifo_fifof_rule_enq ?
	       MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__VAL_1 :
	       MUX_axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$write_1__VAL_2 ;
  assign axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$EN =
	     WILL_FIRE_RL_axi_writer_w_master_0_wr_resp_fifo_fifof_rule_enq ||
	     CAN_FIRE_RL_axi_writer_w_master_0_grab_response &&
	     !WILL_FIRE_RL_axi_writer_w_master_0_start_read ;

  // register read_offset
  assign read_offset$D_IN =
	     read_offset_19_EQ_control_fifo_first__16_BITS__ETC___d1221 ?
	       4'd0 :
	       x__h42160 ;
  assign read_offset$EN = WILL_FIRE_RL_read_complete ;

  // register reads_active
  assign reads_active$D_IN =
	     WILL_FIRE_RL_r_inc_read ?
	       MUX_reads_active$write_1__VAL_1 :
	       MUX_reads_active$write_1__VAL_2 ;
  assign reads_active$EN =
	     WILL_FIRE_RL_r_inc_read ||
	     read_dec$whas && !WILL_FIRE_RL_start_read ;

  // register state
  assign state$D_IN = 2'h0 ;
  assign state$EN = 1'b0 ;

  // register timestamp
  assign timestamp$D_IN = timestamp + 64'd1 ;
  assign timestamp$EN = 1'd1 ;

  // register transaction_active
  assign transaction_active$D_IN = transaction_start$whas ;
  assign transaction_active$EN =
	     transaction_start$whas || transaction_end$whas ;

  // register used_cycles
  assign used_cycles$D_IN = used_cycles + 64'd1 ;
  assign used_cycles$EN = transaction_active ;

  // register writes_active
  assign writes_active$D_IN =
	     WILL_FIRE_RL_r_inc_write ?
	       MUX_writes_active$write_1__VAL_1 :
	       MUX_writes_active$write_1__VAL_2 ;
  assign writes_active$EN =
	     WILL_FIRE_RL_r_inc_write ||
	     WILL_FIRE_RL_write_complete && !WILL_FIRE_RL_start_write ;

  // submodule axi_reader_data_fifo
  assign axi_reader_data_fifo$D_IN =
	     MUX_axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$write_1__SEL_2 ?
	       axi_reader_r_master_0_fifo_tx_rw_enq$wget[160:33] :
	       axi_reader_r_master_0_fifo_tx_taggedReg[160:33] ;
  assign axi_reader_data_fifo$ENQ =
	     MUX_axi_reader_r_master_0_fifo_tx_taggedReg$write_1__SEL_2 ;
  assign axi_reader_data_fifo$DEQ = WILL_FIRE_RL_read_complete ;
  assign axi_reader_data_fifo$CLR = 1'b0 ;

  // submodule axi_writer_write_done
  assign axi_writer_write_done$D_IN = 1'd1 ;
  assign axi_writer_write_done$ENQ =
	     MUX_axi_writer_w_master_0_fifo_tx_taggedReg$write_1__SEL_2 ;
  assign axi_writer_write_done$DEQ = WILL_FIRE_RL_write_complete ;
  assign axi_writer_write_done$CLR = 1'b0 ;

  // submodule control_fifo
  assign control_fifo$D_IN =
	     WILL_FIRE_RL_start_write ?
	       MUX_control_fifo$enq_1__VAL_1 :
	       MUX_control_fifo$enq_1__VAL_2 ;
  assign control_fifo$ENQ =
	     WILL_FIRE_RL_start_write || WILL_FIRE_RL_start_read ;
  assign control_fifo$DEQ =
	     WILL_FIRE_RL_read_complete &&
	     read_offset_19_EQ_control_fifo_first__16_BITS__ETC___d1221 ||
	     WILL_FIRE_RL_write_complete ;
  assign control_fifo$CLR = 1'b0 ;

  // submodule from_mem_fifo
  always@(WILL_FIRE_RL_start_command or
	  MUX_from_mem_fifo$enq_1__VAL_1 or
	  WILL_FIRE_RL_read_complete or
	  MUX_from_mem_fifo$enq_1__VAL_2 or
	  WILL_FIRE_RL_write_complete or MUX_from_mem_fifo$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_start_command:
	  from_mem_fifo$D_IN = MUX_from_mem_fifo$enq_1__VAL_1;
      WILL_FIRE_RL_read_complete:
	  from_mem_fifo$D_IN = MUX_from_mem_fifo$enq_1__VAL_2;
      WILL_FIRE_RL_write_complete:
	  from_mem_fifo$D_IN = MUX_from_mem_fifo$enq_1__VAL_3;
      default: from_mem_fifo$D_IN =
		   175'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign from_mem_fifo$ENQ =
	     WILL_FIRE_RL_start_command || WILL_FIRE_RL_read_complete ||
	     WILL_FIRE_RL_write_complete ;
  assign from_mem_fifo$DEQ = EN_server_response_get ;
  assign from_mem_fifo$CLR = 1'b0 ;

  // submodule to_mem_fifo
  assign to_mem_fifo$D_IN = server_request_put ;
  assign to_mem_fifo$ENQ = EN_server_request_put ;
  assign to_mem_fifo$DEQ =
	     WILL_FIRE_RL_start_command || WILL_FIRE_RL_start_read ||
	     WILL_FIRE_RL_start_write ;
  assign to_mem_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_axi_reader_r_master_0_fifo_rx_rw_enq_wha_ETC___d799 =
	     { x__h38786,
	       CASE_IF_WILL_FIRE_RL_start_read_THEN_axi_reade_ETC__q3,
	       WILL_FIRE_RL_start_read ?
		 { axi_reader_r_master_0_fifo_rx_rw_enq$wget[8:0],
		   axi_reader_r_master_0_fifo_rx_rw_enq$wget[223:192] } :
		 { axi_reader_r_master_0_fifo_rx_taggedReg[8:0],
		   axi_reader_r_master_0_fifo_rx_taggedReg[223:192] } } ;
  assign IF_IF_axi_writer_w_master_0_fifo_rx_rw_enq_wha_ETC___d171 =
	     { x__h4545,
	       CASE_IF_axi_writer_w_master_0_fifo_rx_rw_enq_w_ETC__q1,
	       WILL_FIRE_RL_start_write ?
		 { axi_writer_w_master_0_fifo_rx_rw_enq$wget[8:0],
		   axi_writer_w_master_0_fifo_rx_rw_enq$wget[223:192] } :
		 { axi_writer_w_master_0_fifo_rx_taggedReg[8:0],
		   axi_writer_w_master_0_fifo_rx_taggedReg[223:192] } } ;
  assign IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1098 =
	     WILL_FIRE_RL_start_read ?
	       !axi_reader_r_master_0_fifo_rx_rw_enq$wget[228] :
	       axi_reader_r_master_0_fifo_rx_taggedReg[229] &&
	       !axi_reader_r_master_0_fifo_rx_taggedReg[228] ;
  assign IF_axi_reader_r_master_0_fifo_rx_rw_enq_whas___ETC___d1115 =
	     WILL_FIRE_RL_start_read ?
	       axi_reader_r_master_0_fifo_rx_rw_enq$wget[227:226] :
	       axi_reader_r_master_0_fifo_rx_taggedReg[227:226] ;
  assign IF_axi_reader_r_master_0_rd_resp_fifo_fifof_rw_ETC___d1117 =
	     axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas ?
	       axi_reader_r_master_0_rd_resp_fifo_data_wire$wget[2:1] :
	       axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg[2:1] ;
  assign IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1093 =
	     WILL_FIRE_RL_start_write ?
	       !axi_writer_w_master_0_fifo_rx_rw_enq$wget[228] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[229] &&
	       !axi_writer_w_master_0_fifo_rx_taggedReg[228] ;
  assign IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1110 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[227:226] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[227:226] ;
  assign IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1111 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[37:36] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[37:36] ;
  assign IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d972 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[35:32] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[35:32] ;
  assign IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[63:54] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[63:54] ;
  assign IF_axi_writer_w_master_0_wr_resp_fifo_fifof_rw_ETC___d1114 =
	     axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$whas ?
	       axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$wget[1:0] :
	       axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg[1:0] ;
  assign _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997 =
	     { 28'd0,
	       IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d972 } +
	     32'd1 ;
  assign _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998 =
	     { 28'd0, axi_writer_w_master_0_descriptor[35:32] } + 32'd1 ;
  assign a2__h40386 = { to_mem_fifo$D_OUT[51:24], 4'd0 } ;
  assign addr___1__h20421 = x__h20433 | y__h20434 ;
  assign addr___1__h5012 = x__h5024 | y__h5025 ;
  assign addr__h20392 =
	     axi_writer_w_master_0_descriptor[223:192] + x__h20441 ;
  assign addr__h4873 = value__h4038 + x__h5034 ;
  assign addr_cmd_id__h38535 =
	     WILL_FIRE_RL_start_read ?
	       axi_reader_r_master_0_fifo_rx_rw_enq$wget[16:13] :
	       axi_reader_r_master_0_fifo_rx_taggedReg[16:13] ;
  assign log_length__h20418 =
	     (axi_writer_w_master_0_descriptor[54] ||
	      axi_writer_w_master_0_descriptor[55] ||
	      axi_writer_w_master_0_descriptor[56] ||
	      axi_writer_w_master_0_descriptor[57] ||
	      axi_writer_w_master_0_descriptor[58] ||
	      axi_writer_w_master_0_descriptor[59] ||
	      axi_writer_w_master_0_descriptor[60] ||
	      axi_writer_w_master_0_descriptor[61] ||
	      axi_writer_w_master_0_descriptor[62] ||
	      axi_writer_w_master_0_descriptor[63]) ?
	       { 27'd0, value__h34531 } :
	       32'd32 ;
  assign log_length__h5009 =
	     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[0] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[1] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[2] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[3] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[4] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[5] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[6] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[7] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[8] ||
	      IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[9]) ?
	       { 27'd0, value__h19138 } :
	       32'd32 ;
  assign log_size__h20417 =
	     (_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[0] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[1] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[2] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[3] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[4] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[5] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[6] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[7] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[8] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[9] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[10] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[11] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[12] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[13] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[14] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[15] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[16] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[17] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[18] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[19] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[20] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[21] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[22] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[23] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[24] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[25] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[26] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[27] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[28] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[29] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[30] ||
	      _0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[31]) ?
	       { 27'd0, value__h27198 } :
	       32'd32 ;
  assign log_size__h5008 =
	     (_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[0] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[1] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[2] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[3] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[4] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[5] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[6] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[7] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[8] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[9] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[10] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[11] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[12] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[13] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[14] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[15] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[16] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[17] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[18] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[19] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[20] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[21] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[22] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[23] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[24] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[25] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[26] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[27] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[28] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[29] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[30] ||
	      _0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[31]) ?
	       { 27'd0, value__h11803 } :
	       32'd32 ;
  assign mask__h20195 = ~x__h20208 ;
  assign mask__h20420 = (32'd1 << total__h20419) - 32'd1 ;
  assign mask__h3989 = ~x__h4002 ;
  assign mask__h5011 = (32'd1 << total__h5010) - 32'd1 ;
  assign out___1__h20196 =
	     mask__h20195 << axi_writer_w_master_0_descriptor[195:192] ;
  assign out___1__h3990 = mask__h3989 << value__h4038[3:0] ;
  assign p_address__h42236 =
	     control_fifo$D_OUT[47:20] + { 24'd0, read_offset } ;
  assign read_offset_19_EQ_control_fifo_first__16_BITS__ETC___d1221 =
	     read_offset == control_fifo$D_OUT[3:0] ;
  assign tlm_byte_enable__h3977 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[53:38] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[53:38] ;
  assign total__h20419 = log_size__h20417 + log_length__h20418 ;
  assign total__h5010 = log_size__h5008 + log_length__h5009 ;
  assign value__h11803 =
	     (!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[0] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[1] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[2] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[3] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[4] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[5] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[6] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[7] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[8] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[9] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[10] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[11] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[12] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[13] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[14] &&
	      !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[15]) ?
	       ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[16] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[17] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[18] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[19] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[20] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[21] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[22] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[23]) ?
		  ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[24] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[25] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[26] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[27]) ?
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[28] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[29]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[24] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[25]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[16] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[17] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[18] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[19]) ?
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[20] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[21]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[16] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[17]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[0] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[1] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[2] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[3] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[4] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[5] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[6] &&
		 !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[7]) ?
		  ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[8] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[9] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[10] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[11]) ?
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[12] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[13]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[8] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[9]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[0] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[1] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[2] &&
		    !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[3]) ?
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[4] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[5]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[0] &&
		       !_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[1]) ?
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_IF_axi_writer_w_master_0_fifo_rx_rw_e_ETC___d997[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h19138 =
	     (!IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[0] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[1] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[2] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[3] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[4] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[5] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[6] &&
	      !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[7]) ?
	       (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[8] ?
		  5'd8 :
		  5'd9) :
	       ((!IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[0] &&
		 !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[1] &&
		 !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[2] &&
		 !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[3]) ?
		  ((!IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[4] &&
		    !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[5]) ?
		     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[6] ?
			5'd6 :
			5'd7) :
		     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[4] ?
			5'd4 :
			5'd5)) :
		  ((!IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[0] &&
		    !IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[1]) ?
		     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[2] ?
			5'd2 :
			5'd3) :
		     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999[0] ?
			5'd0 :
			5'd1))) ;
  assign value__h20442 =
	     (axi_writer_w_master_0_descriptor[37:36] == 2'd2) ?
	       5'd0 :
	       y__h20210 ;
  assign value__h27198 =
	     (!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[0] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[1] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[2] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[3] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[4] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[5] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[6] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[7] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[8] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[9] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[10] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[11] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[12] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[13] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[14] &&
	      !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[15]) ?
	       ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[16] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[17] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[18] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[19] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[20] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[21] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[22] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[23]) ?
		  ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[24] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[25] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[26] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[27]) ?
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[28] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[29]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[24] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[25]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[16] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[17] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[18] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[19]) ?
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[20] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[21]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[16] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[17]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[0] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[1] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[2] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[3] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[4] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[5] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[6] &&
		 !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[7]) ?
		  ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[8] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[9] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[10] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[11]) ?
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[12] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[13]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[8] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[9]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[0] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[1] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[2] &&
		    !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[3]) ?
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[4] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[5]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[0] &&
		       !_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[1]) ?
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_axi_writer_w_master_0_descriptor_14_B_ETC___d998[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h34531 =
	     (!axi_writer_w_master_0_descriptor[54] &&
	      !axi_writer_w_master_0_descriptor[55] &&
	      !axi_writer_w_master_0_descriptor[56] &&
	      !axi_writer_w_master_0_descriptor[57] &&
	      !axi_writer_w_master_0_descriptor[58] &&
	      !axi_writer_w_master_0_descriptor[59] &&
	      !axi_writer_w_master_0_descriptor[60] &&
	      !axi_writer_w_master_0_descriptor[61]) ?
	       (axi_writer_w_master_0_descriptor[62] ? 5'd8 : 5'd9) :
	       ((!axi_writer_w_master_0_descriptor[54] &&
		 !axi_writer_w_master_0_descriptor[55] &&
		 !axi_writer_w_master_0_descriptor[56] &&
		 !axi_writer_w_master_0_descriptor[57]) ?
		  ((!axi_writer_w_master_0_descriptor[58] &&
		    !axi_writer_w_master_0_descriptor[59]) ?
		     (axi_writer_w_master_0_descriptor[60] ? 5'd6 : 5'd7) :
		     (axi_writer_w_master_0_descriptor[58] ? 5'd4 : 5'd5)) :
		  ((!axi_writer_w_master_0_descriptor[54] &&
		    !axi_writer_w_master_0_descriptor[55]) ?
		     (axi_writer_w_master_0_descriptor[56] ? 5'd2 : 5'd3) :
		     (axi_writer_w_master_0_descriptor[54] ? 5'd0 : 5'd1))) ;
  assign value__h38750 =
	     (WILL_FIRE_RL_start_read ?
		axi_reader_r_master_0_fifo_rx_rw_enq$wget[63:54] :
		axi_reader_r_master_0_fifo_rx_taggedReg[63:54]) -
	     10'd1 ;
  assign value__h38803 =
	     WILL_FIRE_RL_start_read ?
	       axi_reader_r_master_0_fifo_rx_rw_enq$wget[35:32] :
	       axi_reader_r_master_0_fifo_rx_taggedReg[35:32] ;
  assign value__h4038 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[223:192] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[223:192] ;
  assign value__h4509 =
	     IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d999 -
	     10'd1 ;
  assign value__h5035 =
	     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1111 ==
	      2'd2) ?
	       5'd0 :
	       y__h4004 ;
  assign wr_data_data__h20094 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[140:13] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[140:13] ;
  assign wr_data_data__h3810 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[191:64] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[191:64] ;
  assign wr_data_id__h3809 =
	     WILL_FIRE_RL_start_write ?
	       axi_writer_w_master_0_fifo_rx_rw_enq$wget[16:13] :
	       axi_writer_w_master_0_fifo_rx_taggedReg[16:13] ;
  assign x__h20208 = 16'd65535 << y__h20210 ;
  assign x__h20433 = addr__h20392 & mask__h20420 ;
  assign x__h20441 = { 27'd0, value__h20442 } ;
  assign x__h35705 =
	     axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$whas ?
	       axi_writer_w_master_0_wr_resp_fifo_fifof_rw_enq$wget[5:2] :
	       axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg[5:2] ;
  assign x__h39331 =
	     axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas ?
	       axi_reader_r_master_0_rd_resp_fifo_data_wire$wget[134:131] :
	       axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg[134:131] ;
  assign x__h4002 = 16'd65535 << y__h4004 ;
  assign x__h42160 = read_offset + 4'd1 ;
  assign x__h5024 = addr__h4873 & mask__h5011 ;
  assign x__h5034 = { 27'd0, value__h5035 } ;
  assign x_addr__h20395 =
	     (axi_writer_w_master_0_descriptor[37:36] == 2'd1) ?
	       addr___1__h20421 :
	       addr__h20392 ;
  assign x_addr__h4876 =
	     (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1111 ==
	      2'd1) ?
	       addr___1__h5012 :
	       addr__h4873 ;
  assign x_data__h39111 =
	     axi_reader_r_master_0_rd_resp_fifo_fifof_rw_enq$whas ?
	       axi_reader_r_master_0_rd_resp_fifo_data_wire$wget[130:3] :
	       axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg[130:3] ;
  assign x_data__h41667 = { timestamp, used_cycles } ;
  assign y__h19960 = ~mask__h5011 ;
  assign y__h20210 =
	     { 1'b0, axi_writer_w_master_0_descriptor[35:32] } + 5'd1 ;
  assign y__h20434 = axi_writer_w_master_0_descriptor[223:192] & y__h35353 ;
  assign y__h35353 = ~mask__h20420 ;
  assign y__h4004 =
	     { 1'b0,
	       IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d972 } +
	     5'd1 ;
  assign y__h5025 = value__h4038 & y__h19960 ;
  always@(axi_writer_w_master_0_descriptor or out___1__h20196)
  begin
    case (axi_writer_w_master_0_descriptor[53:38])
      16'd0, 16'd65535: wr_data_strb__h20095 = out___1__h20196;
      default: wr_data_strb__h20095 = axi_writer_w_master_0_descriptor[53:38];
    endcase
  end
  always@(IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d972)
  begin
    case (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d972)
      4'd0: x__h4545 = 3'd0;
      4'd1: x__h4545 = 3'd1;
      4'd3: x__h4545 = 3'd2;
      4'd7: x__h4545 = 3'd3;
      default: x__h4545 = 3'd4;
    endcase
  end
  always@(tlm_byte_enable__h3977 or out___1__h3990)
  begin
    case (tlm_byte_enable__h3977)
      16'd0, 16'd65535: wr_data_strb__h3811 = out___1__h3990;
      default: wr_data_strb__h3811 = tlm_byte_enable__h3977;
    endcase
  end
  always@(IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1111)
  begin
    case (IF_axi_writer_w_master_0_fifo_rx_rw_enq_whas___ETC___d1111)
      2'd0: CASE_IF_axi_writer_w_master_0_fifo_rx_rw_enq_w_ETC__q1 = 2'd1;
      2'd2: CASE_IF_axi_writer_w_master_0_fifo_rx_rw_enq_w_ETC__q1 = 2'd0;
      default: CASE_IF_axi_writer_w_master_0_fifo_rx_rw_enq_w_ETC__q1 = 2'd2;
    endcase
  end
  always@(IF_axi_writer_w_master_0_wr_resp_fifo_fifof_rw_ETC___d1114)
  begin
    case (IF_axi_writer_w_master_0_wr_resp_fifo_fifof_rw_ETC___d1114)
      2'd0:
	  CASE_IF_axi_writer_w_master_0_wr_resp_fifo_fif_ETC__q2 =
	      IF_axi_writer_w_master_0_wr_resp_fifo_fifof_rw_ETC___d1114;
      2'd1: CASE_IF_axi_writer_w_master_0_wr_resp_fifo_fif_ETC__q2 = 2'd3;
      2'd2: CASE_IF_axi_writer_w_master_0_wr_resp_fifo_fif_ETC__q2 = 2'd1;
      2'd3: CASE_IF_axi_writer_w_master_0_wr_resp_fifo_fif_ETC__q2 = 2'd2;
    endcase
  end
  always@(value__h38803)
  begin
    case (value__h38803)
      4'd0: x__h38786 = 3'd0;
      4'd1: x__h38786 = 3'd1;
      4'd3: x__h38786 = 3'd2;
      4'd7: x__h38786 = 3'd3;
      default: x__h38786 = 3'd4;
    endcase
  end
  always@(WILL_FIRE_RL_start_read or
	  axi_reader_r_master_0_fifo_rx_rw_enq$wget or
	  axi_reader_r_master_0_fifo_rx_taggedReg)
  begin
    case (WILL_FIRE_RL_start_read ?
	    axi_reader_r_master_0_fifo_rx_rw_enq$wget[37:36] :
	    axi_reader_r_master_0_fifo_rx_taggedReg[37:36])
      2'd0: CASE_IF_WILL_FIRE_RL_start_read_THEN_axi_reade_ETC__q3 = 2'd1;
      2'd2: CASE_IF_WILL_FIRE_RL_start_read_THEN_axi_reade_ETC__q3 = 2'd0;
      default: CASE_IF_WILL_FIRE_RL_start_read_THEN_axi_reade_ETC__q3 = 2'd2;
    endcase
  end
  always@(IF_axi_reader_r_master_0_rd_resp_fifo_fifof_rw_ETC___d1117)
  begin
    case (IF_axi_reader_r_master_0_rd_resp_fifo_fifof_rw_ETC___d1117)
      2'd0:
	  CASE_IF_axi_reader_r_master_0_rd_resp_fifo_fif_ETC__q4 =
	      IF_axi_reader_r_master_0_rd_resp_fifo_fifof_rw_ETC___d1117;
      2'd1: CASE_IF_axi_reader_r_master_0_rd_resp_fifo_fif_ETC__q4 = 2'd3;
      2'd2: CASE_IF_axi_reader_r_master_0_rd_resp_fifo_fif_ETC__q4 = 2'd1;
      2'd3: CASE_IF_axi_reader_r_master_0_rd_resp_fifo_fif_ETC__q4 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        axi_reader_r_master_0_count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	axi_reader_r_master_0_fifo_rx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      229'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_reader_r_master_0_fifo_tx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      163'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      54'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      135'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_writer_w_master_0_count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	axi_writer_w_master_0_descriptor <= `BSV_ASSIGNMENT_DELAY
	    228'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	axi_writer_w_master_0_fifo_rx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      229'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_writer_w_master_0_fifo_tx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      163'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_writer_w_master_0_saved_data <= `BSV_ASSIGNMENT_DELAY
	    149'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      54'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      149'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 6'bxxxxxx /* unspecified value */  };
	read_offset <= `BSV_ASSIGNMENT_DELAY 4'd0;
	reads_active <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	timestamp <= `BSV_ASSIGNMENT_DELAY 64'd0;
	transaction_active <= `BSV_ASSIGNMENT_DELAY 1'd0;
	used_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	writes_active <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (axi_reader_r_master_0_count$EN)
	  axi_reader_r_master_0_count <= `BSV_ASSIGNMENT_DELAY
	      axi_reader_r_master_0_count$D_IN;
	if (axi_reader_r_master_0_fifo_rx_taggedReg$EN)
	  axi_reader_r_master_0_fifo_rx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_reader_r_master_0_fifo_rx_taggedReg$D_IN;
	if (axi_reader_r_master_0_fifo_tx_taggedReg$EN)
	  axi_reader_r_master_0_fifo_tx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_reader_r_master_0_fifo_tx_taggedReg$D_IN;
	if (axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$EN)
	  axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg$D_IN;
	if (axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$EN)
	  axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg$D_IN;
	if (axi_writer_w_master_0_count$EN)
	  axi_writer_w_master_0_count <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_count$D_IN;
	if (axi_writer_w_master_0_descriptor$EN)
	  axi_writer_w_master_0_descriptor <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_descriptor$D_IN;
	if (axi_writer_w_master_0_fifo_rx_taggedReg$EN)
	  axi_writer_w_master_0_fifo_rx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_fifo_rx_taggedReg$D_IN;
	if (axi_writer_w_master_0_fifo_tx_taggedReg$EN)
	  axi_writer_w_master_0_fifo_tx_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_fifo_tx_taggedReg$D_IN;
	if (axi_writer_w_master_0_saved_data$EN)
	  axi_writer_w_master_0_saved_data <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_saved_data$D_IN;
	if (axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$EN)
	  axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg$D_IN;
	if (axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$EN)
	  axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg$D_IN;
	if (axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$EN)
	  axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg$D_IN;
	if (read_offset$EN)
	  read_offset <= `BSV_ASSIGNMENT_DELAY read_offset$D_IN;
	if (reads_active$EN)
	  reads_active <= `BSV_ASSIGNMENT_DELAY reads_active$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (timestamp$EN) timestamp <= `BSV_ASSIGNMENT_DELAY timestamp$D_IN;
	if (transaction_active$EN)
	  transaction_active <= `BSV_ASSIGNMENT_DELAY transaction_active$D_IN;
	if (used_cycles$EN)
	  used_cycles <= `BSV_ASSIGNMENT_DELAY used_cycles$D_IN;
	if (writes_active$EN)
	  writes_active <= `BSV_ASSIGNMENT_DELAY writes_active$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axi_reader_r_master_0_count = 10'h2AA;
    axi_reader_r_master_0_fifo_rx_taggedReg =
	230'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_reader_r_master_0_fifo_tx_taggedReg =
	164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_reader_r_master_0_rd_addr_fifo_fifof_taggedReg = 55'h2AAAAAAAAAAAAA;
    axi_reader_r_master_0_rd_resp_fifo_fifof_taggedReg =
	136'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_writer_w_master_0_count = 10'h2AA;
    axi_writer_w_master_0_descriptor =
	228'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_writer_w_master_0_fifo_rx_taggedReg =
	230'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_writer_w_master_0_fifo_tx_taggedReg =
	164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_writer_w_master_0_saved_data =
	149'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_writer_w_master_0_wr_addr_fifo_fifof_taggedReg = 55'h2AAAAAAAAAAAAA;
    axi_writer_w_master_0_wr_data_fifo_fifof_taggedReg =
	150'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi_writer_w_master_0_wr_resp_fifo_fifof_taggedReg = 7'h2A;
    read_offset = 4'hA;
    reads_active = 8'hAA;
    state = 2'h2;
    timestamp = 64'hAAAAAAAAAAAAAAAA;
    transaction_active = 1'h0;
    used_cycles = 64'hAAAAAAAAAAAAAAAA;
    writes_active = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_start_write)
	$display("AxiConn ts ",
		 timestamp,
		 " start_write ",
		 to_mem_fifo$D_OUT[195:68],
		 " ",
		 to_mem_fifo$D_OUT[67:52],
		 " ",
		 a2__h40386);
    if (RST_N)
      if (WILL_FIRE_RL_start_read)
	$display("AxiConn ts ",
		 timestamp,
		 " start_read ",
		 a2__h40386,
		 " ",
		 to_mem_fifo$D_OUT[3:0]);
    if (RST_N)
      if (WILL_FIRE_RL_read_complete)
	$display("AxiConn ts ",
		 timestamp,
		 " read ",
		 axi_reader_data_fifo$D_OUT);
    if (RST_N)
      if (WILL_FIRE_RL_write_complete)
	$display("AxiConn ts ", timestamp, " write_complete");
    if (RST_N)
      if (WILL_FIRE_RL_start_command && WILL_FIRE_RL_write_complete)
	$display("Error: \"/home/jg/blueshell/AxiConn.bsv\", line 174, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_start_command] and\n  [RL_write_complete] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_start_command && WILL_FIRE_RL_read_complete)
	$display("Error: \"/home/jg/blueshell/AxiConn.bsv\", line 173, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_start_command] and\n  [RL_read_complete] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_axi_writer_w_master_0_start_read)
	begin
	  v__h35846 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_axi_writer_w_master_0_start_read)
	$display("(%0d) ERROR: AxiWrMaster cannot handle READ OPS!",
		 v__h35846);
    if (RST_N)
      if (WILL_FIRE_RL_axi_reader_r_master_0_start_write)
	begin
	  v__h39472 = $time;
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_axi_reader_r_master_0_start_write)
	$display("(%0d) ERROR: AxiRdMaster cannot handle WRITE ops!",
		 v__h39472);
  end
  // synopsys translate_on
endmodule  // mkAxiConn

