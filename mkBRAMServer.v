//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Tue Jan 21 11:20:03 GMT 2014
//
// Method conflict info:
// Method: server_request_put
// Conflict-free: server_response_get
// Conflicts: server_request_put
//
// Method: server_response_get
// Conflict-free: server_request_put
// Conflicts: server_response_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_request_put         O     1
// server_response_get            O   175 reg
// RDY_server_response_get        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_request_put             I   198
// EN_server_request_put          I     1
// EN_server_response_get         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkBRAMServer(CLK,
		    RST_N,

		    server_request_put,
		    EN_server_request_put,
		    RDY_server_request_put,

		    EN_server_response_get,
		    server_response_get,
		    RDY_server_response_get);
  input  CLK;
  input  RST_N;

  // action method server_request_put
  input  [197 : 0] server_request_put;
  input  EN_server_request_put;
  output RDY_server_request_put;

  // actionvalue method server_response_get
  input  EN_server_response_get;
  output [174 : 0] server_response_get;
  output RDY_server_response_get;

  // signals for module outputs
  wire [174 : 0] server_response_get;
  wire RDY_server_request_put, RDY_server_response_get;

  // inlined wires
  wire rd_active_1$whas;

  // register block_ram_xr_enable_a
  reg block_ram_xr_enable_a;
  wire block_ram_xr_enable_a$D_IN, block_ram_xr_enable_a$EN;

  // register block_ram_xr_enable_b
  reg block_ram_xr_enable_b;
  wire block_ram_xr_enable_b$D_IN, block_ram_xr_enable_b$EN;

  // register block_ram_xr_start
  reg block_ram_xr_start;
  wire block_ram_xr_start$D_IN, block_ram_xr_start$EN;

  // register count
  reg [3 : 0] count;
  wire [3 : 0] count$D_IN;
  wire count$EN;

  // register ram_out
  reg [46 : 0] ram_out;
  wire [46 : 0] ram_out$D_IN;
  wire ram_out$EN;

  // register ram_out_active
  reg ram_out_active;
  wire ram_out_active$D_IN, ram_out_active$EN;

  // register rd
  reg [46 : 0] rd;
  wire [46 : 0] rd$D_IN;
  wire rd$EN;

  // register rd_active
  reg rd_active;
  wire rd_active$D_IN, rd_active$EN;

  // ports of submodule block_ram_xr_r
  wire [31 : 0] block_ram_xr_r$DIA, block_ram_xr_r$DIB, block_ram_xr_r$DOA;
  wire [14 : 0] block_ram_xr_r$ADDRA, block_ram_xr_r$ADDRB;
  wire [3 : 0] block_ram_xr_r$WEA, block_ram_xr_r$WEB;
  wire block_ram_xr_r$ENA, block_ram_xr_r$ENB;

  // ports of submodule block_ram_xr_r_1
  wire [31 : 0] block_ram_xr_r_1$DIA,
		block_ram_xr_r_1$DIB,
		block_ram_xr_r_1$DOA;
  wire [14 : 0] block_ram_xr_r_1$ADDRA, block_ram_xr_r_1$ADDRB;
  wire [3 : 0] block_ram_xr_r_1$WEA, block_ram_xr_r_1$WEB;
  wire block_ram_xr_r_1$ENA, block_ram_xr_r_1$ENB;

  // ports of submodule block_ram_xr_r_10
  wire [31 : 0] block_ram_xr_r_10$DIA,
		block_ram_xr_r_10$DIB,
		block_ram_xr_r_10$DOA;
  wire [14 : 0] block_ram_xr_r_10$ADDRA, block_ram_xr_r_10$ADDRB;
  wire [3 : 0] block_ram_xr_r_10$WEA, block_ram_xr_r_10$WEB;
  wire block_ram_xr_r_10$ENA, block_ram_xr_r_10$ENB;

  // ports of submodule block_ram_xr_r_11
  wire [31 : 0] block_ram_xr_r_11$DIA,
		block_ram_xr_r_11$DIB,
		block_ram_xr_r_11$DOA;
  wire [14 : 0] block_ram_xr_r_11$ADDRA, block_ram_xr_r_11$ADDRB;
  wire [3 : 0] block_ram_xr_r_11$WEA, block_ram_xr_r_11$WEB;
  wire block_ram_xr_r_11$ENA, block_ram_xr_r_11$ENB;

  // ports of submodule block_ram_xr_r_12
  wire [31 : 0] block_ram_xr_r_12$DIA,
		block_ram_xr_r_12$DIB,
		block_ram_xr_r_12$DOA;
  wire [14 : 0] block_ram_xr_r_12$ADDRA, block_ram_xr_r_12$ADDRB;
  wire [3 : 0] block_ram_xr_r_12$WEA, block_ram_xr_r_12$WEB;
  wire block_ram_xr_r_12$ENA, block_ram_xr_r_12$ENB;

  // ports of submodule block_ram_xr_r_13
  wire [31 : 0] block_ram_xr_r_13$DIA,
		block_ram_xr_r_13$DIB,
		block_ram_xr_r_13$DOA;
  wire [14 : 0] block_ram_xr_r_13$ADDRA, block_ram_xr_r_13$ADDRB;
  wire [3 : 0] block_ram_xr_r_13$WEA, block_ram_xr_r_13$WEB;
  wire block_ram_xr_r_13$ENA, block_ram_xr_r_13$ENB;

  // ports of submodule block_ram_xr_r_14
  wire [31 : 0] block_ram_xr_r_14$DIA,
		block_ram_xr_r_14$DIB,
		block_ram_xr_r_14$DOA;
  wire [14 : 0] block_ram_xr_r_14$ADDRA, block_ram_xr_r_14$ADDRB;
  wire [3 : 0] block_ram_xr_r_14$WEA, block_ram_xr_r_14$WEB;
  wire block_ram_xr_r_14$ENA, block_ram_xr_r_14$ENB;

  // ports of submodule block_ram_xr_r_15
  wire [31 : 0] block_ram_xr_r_15$DIA,
		block_ram_xr_r_15$DIB,
		block_ram_xr_r_15$DOA;
  wire [14 : 0] block_ram_xr_r_15$ADDRA, block_ram_xr_r_15$ADDRB;
  wire [3 : 0] block_ram_xr_r_15$WEA, block_ram_xr_r_15$WEB;
  wire block_ram_xr_r_15$ENA, block_ram_xr_r_15$ENB;

  // ports of submodule block_ram_xr_r_2
  wire [31 : 0] block_ram_xr_r_2$DIA,
		block_ram_xr_r_2$DIB,
		block_ram_xr_r_2$DOA;
  wire [14 : 0] block_ram_xr_r_2$ADDRA, block_ram_xr_r_2$ADDRB;
  wire [3 : 0] block_ram_xr_r_2$WEA, block_ram_xr_r_2$WEB;
  wire block_ram_xr_r_2$ENA, block_ram_xr_r_2$ENB;

  // ports of submodule block_ram_xr_r_3
  wire [31 : 0] block_ram_xr_r_3$DIA,
		block_ram_xr_r_3$DIB,
		block_ram_xr_r_3$DOA;
  wire [14 : 0] block_ram_xr_r_3$ADDRA, block_ram_xr_r_3$ADDRB;
  wire [3 : 0] block_ram_xr_r_3$WEA, block_ram_xr_r_3$WEB;
  wire block_ram_xr_r_3$ENA, block_ram_xr_r_3$ENB;

  // ports of submodule block_ram_xr_r_4
  wire [31 : 0] block_ram_xr_r_4$DIA,
		block_ram_xr_r_4$DIB,
		block_ram_xr_r_4$DOA;
  wire [14 : 0] block_ram_xr_r_4$ADDRA, block_ram_xr_r_4$ADDRB;
  wire [3 : 0] block_ram_xr_r_4$WEA, block_ram_xr_r_4$WEB;
  wire block_ram_xr_r_4$ENA, block_ram_xr_r_4$ENB;

  // ports of submodule block_ram_xr_r_5
  wire [31 : 0] block_ram_xr_r_5$DIA,
		block_ram_xr_r_5$DIB,
		block_ram_xr_r_5$DOA;
  wire [14 : 0] block_ram_xr_r_5$ADDRA, block_ram_xr_r_5$ADDRB;
  wire [3 : 0] block_ram_xr_r_5$WEA, block_ram_xr_r_5$WEB;
  wire block_ram_xr_r_5$ENA, block_ram_xr_r_5$ENB;

  // ports of submodule block_ram_xr_r_6
  wire [31 : 0] block_ram_xr_r_6$DIA,
		block_ram_xr_r_6$DIB,
		block_ram_xr_r_6$DOA;
  wire [14 : 0] block_ram_xr_r_6$ADDRA, block_ram_xr_r_6$ADDRB;
  wire [3 : 0] block_ram_xr_r_6$WEA, block_ram_xr_r_6$WEB;
  wire block_ram_xr_r_6$ENA, block_ram_xr_r_6$ENB;

  // ports of submodule block_ram_xr_r_7
  wire [31 : 0] block_ram_xr_r_7$DIA,
		block_ram_xr_r_7$DIB,
		block_ram_xr_r_7$DOA;
  wire [14 : 0] block_ram_xr_r_7$ADDRA, block_ram_xr_r_7$ADDRB;
  wire [3 : 0] block_ram_xr_r_7$WEA, block_ram_xr_r_7$WEB;
  wire block_ram_xr_r_7$ENA, block_ram_xr_r_7$ENB;

  // ports of submodule block_ram_xr_r_8
  wire [31 : 0] block_ram_xr_r_8$DIA,
		block_ram_xr_r_8$DIB,
		block_ram_xr_r_8$DOA;
  wire [14 : 0] block_ram_xr_r_8$ADDRA, block_ram_xr_r_8$ADDRB;
  wire [3 : 0] block_ram_xr_r_8$WEA, block_ram_xr_r_8$WEB;
  wire block_ram_xr_r_8$ENA, block_ram_xr_r_8$ENB;

  // ports of submodule block_ram_xr_r_9
  wire [31 : 0] block_ram_xr_r_9$DIA,
		block_ram_xr_r_9$DIB,
		block_ram_xr_r_9$DOA;
  wire [14 : 0] block_ram_xr_r_9$ADDRA, block_ram_xr_r_9$ADDRB;
  wire [3 : 0] block_ram_xr_r_9$WEA, block_ram_xr_r_9$WEB;
  wire block_ram_xr_r_9$ENA, block_ram_xr_r_9$ENB;

  // ports of submodule outFifo
  wire [174 : 0] outFifo$D_IN, outFifo$D_OUT;
  wire outFifo$CLR, outFifo$DEQ, outFifo$EMPTY_N, outFifo$ENQ, outFifo$FULL_N;

  // inputs to muxes for submodule ports
  wire [46 : 0] MUX_rd$write_1__VAL_1, MUX_rd$write_1__VAL_2;
  wire [3 : 0] MUX_count$write_1__VAL_1, MUX_count$write_1__VAL_2;

  // remaining internal signals
  wire [127 : 0] data1__h25677, x_data__h25605;
  wire [27 : 0] x_address__h3528;
  wire [14 : 0] IF_rd_5_BIT_30_2_THEN_32767_ELSE_16383___d214,
		IF_server_request_put_BIT_35_1_THEN_32767_ELSE_ETC___d215;
  wire [11 : 0] IF_rd_BIT_19_THEN_1_ELSE_0__q1,
		IF_server_request_put_BIT_24_THEN_1_ELSE_0__q3;
  wire [3 : 0] IF_server_request_put_BIT_52_THEN_1_ELSE_0__q10,
	       IF_server_request_put_BIT_53_THEN_1_ELSE_0__q9,
	       IF_server_request_put_BIT_54_THEN_1_ELSE_0__q8,
	       IF_server_request_put_BIT_55_THEN_1_ELSE_0__q7,
	       IF_server_request_put_BIT_56_THEN_1_ELSE_0__q6,
	       IF_server_request_put_BIT_57_THEN_1_ELSE_0__q5,
	       IF_server_request_put_BIT_58_THEN_1_ELSE_0__q18,
	       IF_server_request_put_BIT_59_THEN_1_ELSE_0__q17,
	       IF_server_request_put_BIT_60_THEN_1_ELSE_0__q16,
	       IF_server_request_put_BIT_61_THEN_1_ELSE_0__q15,
	       IF_server_request_put_BIT_62_THEN_1_ELSE_0__q14,
	       IF_server_request_put_BIT_63_THEN_1_ELSE_0__q13,
	       IF_server_request_put_BIT_64_THEN_1_ELSE_0__q12,
	       IF_server_request_put_BIT_65_THEN_1_ELSE_0__q11,
	       IF_server_request_put_BIT_66_THEN_1_ELSE_0__q4,
	       IF_server_request_put_BIT_67_THEN_1_ELSE_0__q2;

  // action method server_request_put
  assign RDY_server_request_put = count == 4'd0 ;

  // actionvalue method server_response_get
  assign server_response_get = outFifo$D_OUT ;
  assign RDY_server_response_get = outFifo$EMPTY_N ;

  // submodule block_ram_xr_r
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r(.CLK(CLK),
					       .RST_N(RST_N),
					       .ADDRA(block_ram_xr_r$ADDRA),
					       .ADDRB(block_ram_xr_r$ADDRB),
					       .DIA(block_ram_xr_r$DIA),
					       .DIB(block_ram_xr_r$DIB),
					       .WEA(block_ram_xr_r$WEA),
					       .WEB(block_ram_xr_r$WEB),
					       .ENA(block_ram_xr_r$ENA),
					       .ENB(block_ram_xr_r$ENB),
					       .DOA(block_ram_xr_r$DOA),
					       .DOB());

  // submodule block_ram_xr_r_1
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_1(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_1$ADDRA),
						 .ADDRB(block_ram_xr_r_1$ADDRB),
						 .DIA(block_ram_xr_r_1$DIA),
						 .DIB(block_ram_xr_r_1$DIB),
						 .WEA(block_ram_xr_r_1$WEA),
						 .WEB(block_ram_xr_r_1$WEB),
						 .ENA(block_ram_xr_r_1$ENA),
						 .ENB(block_ram_xr_r_1$ENB),
						 .DOA(block_ram_xr_r_1$DOA),
						 .DOB());

  // submodule block_ram_xr_r_10
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_10(.CLK(CLK),
						  .RST_N(RST_N),
						  .ADDRA(block_ram_xr_r_10$ADDRA),
						  .ADDRB(block_ram_xr_r_10$ADDRB),
						  .DIA(block_ram_xr_r_10$DIA),
						  .DIB(block_ram_xr_r_10$DIB),
						  .WEA(block_ram_xr_r_10$WEA),
						  .WEB(block_ram_xr_r_10$WEB),
						  .ENA(block_ram_xr_r_10$ENA),
						  .ENB(block_ram_xr_r_10$ENB),
						  .DOA(block_ram_xr_r_10$DOA),
						  .DOB());

  // submodule block_ram_xr_r_11
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_11(.CLK(CLK),
						  .RST_N(RST_N),
						  .ADDRA(block_ram_xr_r_11$ADDRA),
						  .ADDRB(block_ram_xr_r_11$ADDRB),
						  .DIA(block_ram_xr_r_11$DIA),
						  .DIB(block_ram_xr_r_11$DIB),
						  .WEA(block_ram_xr_r_11$WEA),
						  .WEB(block_ram_xr_r_11$WEB),
						  .ENA(block_ram_xr_r_11$ENA),
						  .ENB(block_ram_xr_r_11$ENB),
						  .DOA(block_ram_xr_r_11$DOA),
						  .DOB());

  // submodule block_ram_xr_r_12
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_12(.CLK(CLK),
						  .RST_N(RST_N),
						  .ADDRA(block_ram_xr_r_12$ADDRA),
						  .ADDRB(block_ram_xr_r_12$ADDRB),
						  .DIA(block_ram_xr_r_12$DIA),
						  .DIB(block_ram_xr_r_12$DIB),
						  .WEA(block_ram_xr_r_12$WEA),
						  .WEB(block_ram_xr_r_12$WEB),
						  .ENA(block_ram_xr_r_12$ENA),
						  .ENB(block_ram_xr_r_12$ENB),
						  .DOA(block_ram_xr_r_12$DOA),
						  .DOB());

  // submodule block_ram_xr_r_13
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_13(.CLK(CLK),
						  .RST_N(RST_N),
						  .ADDRA(block_ram_xr_r_13$ADDRA),
						  .ADDRB(block_ram_xr_r_13$ADDRB),
						  .DIA(block_ram_xr_r_13$DIA),
						  .DIB(block_ram_xr_r_13$DIB),
						  .WEA(block_ram_xr_r_13$WEA),
						  .WEB(block_ram_xr_r_13$WEB),
						  .ENA(block_ram_xr_r_13$ENA),
						  .ENB(block_ram_xr_r_13$ENB),
						  .DOA(block_ram_xr_r_13$DOA),
						  .DOB());

  // submodule block_ram_xr_r_14
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_14(.CLK(CLK),
						  .RST_N(RST_N),
						  .ADDRA(block_ram_xr_r_14$ADDRA),
						  .ADDRB(block_ram_xr_r_14$ADDRB),
						  .DIA(block_ram_xr_r_14$DIA),
						  .DIB(block_ram_xr_r_14$DIB),
						  .WEA(block_ram_xr_r_14$WEA),
						  .WEB(block_ram_xr_r_14$WEB),
						  .ENA(block_ram_xr_r_14$ENA),
						  .ENB(block_ram_xr_r_14$ENB),
						  .DOA(block_ram_xr_r_14$DOA),
						  .DOB());

  // submodule block_ram_xr_r_15
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_15(.CLK(CLK),
						  .RST_N(RST_N),
						  .ADDRA(block_ram_xr_r_15$ADDRA),
						  .ADDRB(block_ram_xr_r_15$ADDRB),
						  .DIA(block_ram_xr_r_15$DIA),
						  .DIB(block_ram_xr_r_15$DIB),
						  .WEA(block_ram_xr_r_15$WEA),
						  .WEB(block_ram_xr_r_15$WEB),
						  .ENA(block_ram_xr_r_15$ENA),
						  .ENB(block_ram_xr_r_15$ENB),
						  .DOA(block_ram_xr_r_15$DOA),
						  .DOB());

  // submodule block_ram_xr_r_2
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_2(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_2$ADDRA),
						 .ADDRB(block_ram_xr_r_2$ADDRB),
						 .DIA(block_ram_xr_r_2$DIA),
						 .DIB(block_ram_xr_r_2$DIB),
						 .WEA(block_ram_xr_r_2$WEA),
						 .WEB(block_ram_xr_r_2$WEB),
						 .ENA(block_ram_xr_r_2$ENA),
						 .ENB(block_ram_xr_r_2$ENB),
						 .DOA(block_ram_xr_r_2$DOA),
						 .DOB());

  // submodule block_ram_xr_r_3
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_3(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_3$ADDRA),
						 .ADDRB(block_ram_xr_r_3$ADDRB),
						 .DIA(block_ram_xr_r_3$DIA),
						 .DIB(block_ram_xr_r_3$DIB),
						 .WEA(block_ram_xr_r_3$WEA),
						 .WEB(block_ram_xr_r_3$WEB),
						 .ENA(block_ram_xr_r_3$ENA),
						 .ENB(block_ram_xr_r_3$ENB),
						 .DOA(block_ram_xr_r_3$DOA),
						 .DOB());

  // submodule block_ram_xr_r_4
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_4(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_4$ADDRA),
						 .ADDRB(block_ram_xr_r_4$ADDRB),
						 .DIA(block_ram_xr_r_4$DIA),
						 .DIB(block_ram_xr_r_4$DIB),
						 .WEA(block_ram_xr_r_4$WEA),
						 .WEB(block_ram_xr_r_4$WEB),
						 .ENA(block_ram_xr_r_4$ENA),
						 .ENB(block_ram_xr_r_4$ENB),
						 .DOA(block_ram_xr_r_4$DOA),
						 .DOB());

  // submodule block_ram_xr_r_5
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_5(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_5$ADDRA),
						 .ADDRB(block_ram_xr_r_5$ADDRB),
						 .DIA(block_ram_xr_r_5$DIA),
						 .DIB(block_ram_xr_r_5$DIB),
						 .WEA(block_ram_xr_r_5$WEA),
						 .WEB(block_ram_xr_r_5$WEB),
						 .ENA(block_ram_xr_r_5$ENA),
						 .ENB(block_ram_xr_r_5$ENB),
						 .DOA(block_ram_xr_r_5$DOA),
						 .DOB());

  // submodule block_ram_xr_r_6
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_6(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_6$ADDRA),
						 .ADDRB(block_ram_xr_r_6$ADDRB),
						 .DIA(block_ram_xr_r_6$DIA),
						 .DIB(block_ram_xr_r_6$DIB),
						 .WEA(block_ram_xr_r_6$WEA),
						 .WEB(block_ram_xr_r_6$WEB),
						 .ENA(block_ram_xr_r_6$ENA),
						 .ENB(block_ram_xr_r_6$ENB),
						 .DOA(block_ram_xr_r_6$DOA),
						 .DOB());

  // submodule block_ram_xr_r_7
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_7(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_7$ADDRA),
						 .ADDRB(block_ram_xr_r_7$ADDRB),
						 .DIA(block_ram_xr_r_7$DIA),
						 .DIB(block_ram_xr_r_7$DIB),
						 .WEA(block_ram_xr_r_7$WEA),
						 .WEB(block_ram_xr_r_7$WEB),
						 .ENA(block_ram_xr_r_7$ENA),
						 .ENB(block_ram_xr_r_7$ENB),
						 .DOA(block_ram_xr_r_7$DOA),
						 .DOB());

  // submodule block_ram_xr_r_8
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_8(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_8$ADDRA),
						 .ADDRB(block_ram_xr_r_8$ADDRB),
						 .DIA(block_ram_xr_r_8$DIA),
						 .DIB(block_ram_xr_r_8$DIB),
						 .WEA(block_ram_xr_r_8$WEA),
						 .WEB(block_ram_xr_r_8$WEB),
						 .ENA(block_ram_xr_r_8$ENA),
						 .ENB(block_ram_xr_r_8$ENB),
						 .DOA(block_ram_xr_r_8$DOA),
						 .DOB());

  // submodule block_ram_xr_r_9
  bram_v6 #(.DATA_WIDTH(32'd9)) block_ram_xr_r_9(.CLK(CLK),
						 .RST_N(RST_N),
						 .ADDRA(block_ram_xr_r_9$ADDRA),
						 .ADDRB(block_ram_xr_r_9$ADDRB),
						 .DIA(block_ram_xr_r_9$DIA),
						 .DIB(block_ram_xr_r_9$DIB),
						 .WEA(block_ram_xr_r_9$WEA),
						 .WEB(block_ram_xr_r_9$WEB),
						 .ENA(block_ram_xr_r_9$ENA),
						 .ENB(block_ram_xr_r_9$ENB),
						 .DOA(block_ram_xr_r_9$DOA),
						 .DOB());

  // submodule outFifo
  FIFO2 #(.width(32'd175), .guarded(32'd1)) outFifo(.RST_N(RST_N),
						    .CLK(CLK),
						    .D_IN(outFifo$D_IN),
						    .ENQ(outFifo$ENQ),
						    .DEQ(outFifo$DEQ),
						    .CLR(outFifo$CLR),
						    .D_OUT(outFifo$D_OUT),
						    .FULL_N(outFifo$FULL_N),
						    .EMPTY_N(outFifo$EMPTY_N));

  // inputs to muxes for submodule ports
  assign MUX_count$write_1__VAL_1 = count - 4'd1 ;
  assign MUX_count$write_1__VAL_2 =
	     (server_request_put[67:52] == 16'd0) ?
	       server_request_put[3:0] :
	       4'd0 ;
  assign MUX_rd$write_1__VAL_1 = { x_address__h3528, rd[18:0] } ;
  assign MUX_rd$write_1__VAL_2 =
	     { server_request_put[51:8],
	       (server_request_put[67:52] == 16'd0) ?
		 ((server_request_put[197:196] == 2'd0) ? 3'd0 : 3'd2) :
		 3'd3 } ;

  // inlined wires
  assign rd_active_1$whas = count != 4'd0 || EN_server_request_put ;

  // register block_ram_xr_enable_a
  assign block_ram_xr_enable_a$D_IN = 1'd1 ;
  assign block_ram_xr_enable_a$EN = 1'd1 ;

  // register block_ram_xr_enable_b
  assign block_ram_xr_enable_b$D_IN = 1'd1 ;
  assign block_ram_xr_enable_b$EN =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // register block_ram_xr_start
  assign block_ram_xr_start$D_IN = 1'd0 ;
  assign block_ram_xr_start$EN = block_ram_xr_start ;

  // register count
  assign count$D_IN =
	     (count != 4'd0) ?
	       MUX_count$write_1__VAL_1 :
	       MUX_count$write_1__VAL_2 ;
  assign count$EN = rd_active_1$whas ;

  // register ram_out
  assign ram_out$D_IN = rd ;
  assign ram_out$EN = 1'd1 ;

  // register ram_out_active
  assign ram_out_active$D_IN = rd_active ;
  assign ram_out_active$EN = 1'd1 ;

  // register rd
  assign rd$D_IN =
	     (count != 4'd0) ? MUX_rd$write_1__VAL_1 : MUX_rd$write_1__VAL_2 ;
  assign rd$EN = rd_active_1$whas ;

  // register rd_active
  assign rd_active$D_IN = rd_active_1$whas ;
  assign rd_active$EN = 1'd1 ;

  // submodule block_ram_xr_r
  assign block_ram_xr_r$ADDRA =
	     { IF_rd_5_BIT_30_2_THEN_32767_ELSE_16383___d214[14],
	       rd[29:20],
	       IF_rd_BIT_19_THEN_1_ELSE_0__q1[0],
	       IF_rd_5_BIT_30_2_THEN_32767_ELSE_16383___d214[2:0] } ;
  assign block_ram_xr_r$ADDRB =
	     { IF_server_request_put_BIT_35_1_THEN_32767_ELSE_ETC___d215[14],
	       server_request_put[34:25],
	       IF_server_request_put_BIT_24_THEN_1_ELSE_0__q3[0],
	       IF_server_request_put_BIT_35_1_THEN_32767_ELSE_ETC___d215[2:0] } ;
  assign block_ram_xr_r$DIA = 32'd0 ;
  assign block_ram_xr_r$DIB = { 24'd0, server_request_put[195:188] } ;
  assign block_ram_xr_r$WEA = 4'd0 ;
  assign block_ram_xr_r$WEB =
	     {4{IF_server_request_put_BIT_67_THEN_1_ELSE_0__q2[0]}} ;
  assign block_ram_xr_r$ENA = 1'd1 ;
  assign block_ram_xr_r$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_1
  assign block_ram_xr_r_1$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_1$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_1$DIA = 32'd0 ;
  assign block_ram_xr_r_1$DIB = { 24'd0, server_request_put[187:180] } ;
  assign block_ram_xr_r_1$WEA = 4'd0 ;
  assign block_ram_xr_r_1$WEB =
	     {4{IF_server_request_put_BIT_66_THEN_1_ELSE_0__q4[0]}} ;
  assign block_ram_xr_r_1$ENA = 1'd1 ;
  assign block_ram_xr_r_1$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_10
  assign block_ram_xr_r_10$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_10$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_10$DIA = 32'd0 ;
  assign block_ram_xr_r_10$DIB = { 24'd0, server_request_put[115:108] } ;
  assign block_ram_xr_r_10$WEA = 4'd0 ;
  assign block_ram_xr_r_10$WEB =
	     {4{IF_server_request_put_BIT_57_THEN_1_ELSE_0__q5[0]}} ;
  assign block_ram_xr_r_10$ENA = 1'd1 ;
  assign block_ram_xr_r_10$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_11
  assign block_ram_xr_r_11$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_11$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_11$DIA = 32'd0 ;
  assign block_ram_xr_r_11$DIB = { 24'd0, server_request_put[107:100] } ;
  assign block_ram_xr_r_11$WEA = 4'd0 ;
  assign block_ram_xr_r_11$WEB =
	     {4{IF_server_request_put_BIT_56_THEN_1_ELSE_0__q6[0]}} ;
  assign block_ram_xr_r_11$ENA = 1'd1 ;
  assign block_ram_xr_r_11$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_12
  assign block_ram_xr_r_12$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_12$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_12$DIA = 32'd0 ;
  assign block_ram_xr_r_12$DIB = { 24'd0, server_request_put[99:92] } ;
  assign block_ram_xr_r_12$WEA = 4'd0 ;
  assign block_ram_xr_r_12$WEB =
	     {4{IF_server_request_put_BIT_55_THEN_1_ELSE_0__q7[0]}} ;
  assign block_ram_xr_r_12$ENA = 1'd1 ;
  assign block_ram_xr_r_12$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_13
  assign block_ram_xr_r_13$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_13$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_13$DIA = 32'd0 ;
  assign block_ram_xr_r_13$DIB = { 24'd0, server_request_put[91:84] } ;
  assign block_ram_xr_r_13$WEA = 4'd0 ;
  assign block_ram_xr_r_13$WEB =
	     {4{IF_server_request_put_BIT_54_THEN_1_ELSE_0__q8[0]}} ;
  assign block_ram_xr_r_13$ENA = 1'd1 ;
  assign block_ram_xr_r_13$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_14
  assign block_ram_xr_r_14$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_14$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_14$DIA = 32'd0 ;
  assign block_ram_xr_r_14$DIB = { 24'd0, server_request_put[83:76] } ;
  assign block_ram_xr_r_14$WEA = 4'd0 ;
  assign block_ram_xr_r_14$WEB =
	     {4{IF_server_request_put_BIT_53_THEN_1_ELSE_0__q9[0]}} ;
  assign block_ram_xr_r_14$ENA = 1'd1 ;
  assign block_ram_xr_r_14$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_15
  assign block_ram_xr_r_15$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_15$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_15$DIA = 32'd0 ;
  assign block_ram_xr_r_15$DIB = { 24'd0, server_request_put[75:68] } ;
  assign block_ram_xr_r_15$WEA = 4'd0 ;
  assign block_ram_xr_r_15$WEB =
	     {4{IF_server_request_put_BIT_52_THEN_1_ELSE_0__q10[0]}} ;
  assign block_ram_xr_r_15$ENA = 1'd1 ;
  assign block_ram_xr_r_15$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_2
  assign block_ram_xr_r_2$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_2$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_2$DIA = 32'd0 ;
  assign block_ram_xr_r_2$DIB = { 24'd0, server_request_put[179:172] } ;
  assign block_ram_xr_r_2$WEA = 4'd0 ;
  assign block_ram_xr_r_2$WEB =
	     {4{IF_server_request_put_BIT_65_THEN_1_ELSE_0__q11[0]}} ;
  assign block_ram_xr_r_2$ENA = 1'd1 ;
  assign block_ram_xr_r_2$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_3
  assign block_ram_xr_r_3$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_3$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_3$DIA = 32'd0 ;
  assign block_ram_xr_r_3$DIB = { 24'd0, server_request_put[171:164] } ;
  assign block_ram_xr_r_3$WEA = 4'd0 ;
  assign block_ram_xr_r_3$WEB =
	     {4{IF_server_request_put_BIT_64_THEN_1_ELSE_0__q12[0]}} ;
  assign block_ram_xr_r_3$ENA = 1'd1 ;
  assign block_ram_xr_r_3$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_4
  assign block_ram_xr_r_4$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_4$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_4$DIA = 32'd0 ;
  assign block_ram_xr_r_4$DIB = { 24'd0, server_request_put[163:156] } ;
  assign block_ram_xr_r_4$WEA = 4'd0 ;
  assign block_ram_xr_r_4$WEB =
	     {4{IF_server_request_put_BIT_63_THEN_1_ELSE_0__q13[0]}} ;
  assign block_ram_xr_r_4$ENA = 1'd1 ;
  assign block_ram_xr_r_4$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_5
  assign block_ram_xr_r_5$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_5$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_5$DIA = 32'd0 ;
  assign block_ram_xr_r_5$DIB = { 24'd0, server_request_put[155:148] } ;
  assign block_ram_xr_r_5$WEA = 4'd0 ;
  assign block_ram_xr_r_5$WEB =
	     {4{IF_server_request_put_BIT_62_THEN_1_ELSE_0__q14[0]}} ;
  assign block_ram_xr_r_5$ENA = 1'd1 ;
  assign block_ram_xr_r_5$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_6
  assign block_ram_xr_r_6$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_6$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_6$DIA = 32'd0 ;
  assign block_ram_xr_r_6$DIB = { 24'd0, server_request_put[147:140] } ;
  assign block_ram_xr_r_6$WEA = 4'd0 ;
  assign block_ram_xr_r_6$WEB =
	     {4{IF_server_request_put_BIT_61_THEN_1_ELSE_0__q15[0]}} ;
  assign block_ram_xr_r_6$ENA = 1'd1 ;
  assign block_ram_xr_r_6$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_7
  assign block_ram_xr_r_7$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_7$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_7$DIA = 32'd0 ;
  assign block_ram_xr_r_7$DIB = { 24'd0, server_request_put[139:132] } ;
  assign block_ram_xr_r_7$WEA = 4'd0 ;
  assign block_ram_xr_r_7$WEB =
	     {4{IF_server_request_put_BIT_60_THEN_1_ELSE_0__q16[0]}} ;
  assign block_ram_xr_r_7$ENA = 1'd1 ;
  assign block_ram_xr_r_7$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_8
  assign block_ram_xr_r_8$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_8$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_8$DIA = 32'd0 ;
  assign block_ram_xr_r_8$DIB = { 24'd0, server_request_put[131:124] } ;
  assign block_ram_xr_r_8$WEA = 4'd0 ;
  assign block_ram_xr_r_8$WEB =
	     {4{IF_server_request_put_BIT_59_THEN_1_ELSE_0__q17[0]}} ;
  assign block_ram_xr_r_8$ENA = 1'd1 ;
  assign block_ram_xr_r_8$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule block_ram_xr_r_9
  assign block_ram_xr_r_9$ADDRA = block_ram_xr_r$ADDRA ;
  assign block_ram_xr_r_9$ADDRB = block_ram_xr_r$ADDRB ;
  assign block_ram_xr_r_9$DIA = 32'd0 ;
  assign block_ram_xr_r_9$DIB = { 24'd0, server_request_put[123:116] } ;
  assign block_ram_xr_r_9$WEA = 4'd0 ;
  assign block_ram_xr_r_9$WEB =
	     {4{IF_server_request_put_BIT_58_THEN_1_ELSE_0__q18[0]}} ;
  assign block_ram_xr_r_9$ENA = 1'd1 ;
  assign block_ram_xr_r_9$ENB =
	     EN_server_request_put && server_request_put[67:52] != 16'd0 ;

  // submodule outFifo
  assign outFifo$D_IN = { ram_out[2:0], x_data__h25605, ram_out[46:3] } ;
  assign outFifo$ENQ = outFifo$FULL_N && ram_out_active ;
  assign outFifo$DEQ = EN_server_response_get ;
  assign outFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_rd_5_BIT_30_2_THEN_32767_ELSE_16383___d214 =
	     rd[30] ? 15'd32767 : 15'd16383 ;
  assign IF_rd_BIT_19_THEN_1_ELSE_0__q1 = rd[19] ? 12'd1 : 12'd0 ;
  assign IF_server_request_put_BIT_24_THEN_1_ELSE_0__q3 =
	     server_request_put[24] ? 12'd1 : 12'd0 ;
  assign IF_server_request_put_BIT_35_1_THEN_32767_ELSE_ETC___d215 =
	     server_request_put[35] ? 15'd32767 : 15'd16383 ;
  assign IF_server_request_put_BIT_52_THEN_1_ELSE_0__q10 =
	     server_request_put[52] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_53_THEN_1_ELSE_0__q9 =
	     server_request_put[53] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_54_THEN_1_ELSE_0__q8 =
	     server_request_put[54] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_55_THEN_1_ELSE_0__q7 =
	     server_request_put[55] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_56_THEN_1_ELSE_0__q6 =
	     server_request_put[56] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_57_THEN_1_ELSE_0__q5 =
	     server_request_put[57] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_58_THEN_1_ELSE_0__q18 =
	     server_request_put[58] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_59_THEN_1_ELSE_0__q17 =
	     server_request_put[59] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_60_THEN_1_ELSE_0__q16 =
	     server_request_put[60] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_61_THEN_1_ELSE_0__q15 =
	     server_request_put[61] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_62_THEN_1_ELSE_0__q14 =
	     server_request_put[62] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_63_THEN_1_ELSE_0__q13 =
	     server_request_put[63] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_64_THEN_1_ELSE_0__q12 =
	     server_request_put[64] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_65_THEN_1_ELSE_0__q11 =
	     server_request_put[65] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_66_THEN_1_ELSE_0__q4 =
	     server_request_put[66] ? 4'd1 : 4'd0 ;
  assign IF_server_request_put_BIT_67_THEN_1_ELSE_0__q2 =
	     server_request_put[67] ? 4'd1 : 4'd0 ;
  assign data1__h25677 =
	     { block_ram_xr_r$DOA[7:0],
	       block_ram_xr_r_1$DOA[7:0],
	       block_ram_xr_r_2$DOA[7:0],
	       block_ram_xr_r_3$DOA[7:0],
	       block_ram_xr_r_4$DOA[7:0],
	       block_ram_xr_r_5$DOA[7:0],
	       block_ram_xr_r_6$DOA[7:0],
	       block_ram_xr_r_7$DOA[7:0],
	       block_ram_xr_r_8$DOA[7:0],
	       block_ram_xr_r_9$DOA[7:0],
	       block_ram_xr_r_10$DOA[7:0],
	       block_ram_xr_r_11$DOA[7:0],
	       block_ram_xr_r_12$DOA[7:0],
	       block_ram_xr_r_13$DOA[7:0],
	       block_ram_xr_r_14$DOA[7:0],
	       block_ram_xr_r_15$DOA[7:0] } ;
  assign x_address__h3528 = rd[46:19] + 28'd1 ;
  assign x_data__h25605 = block_ram_xr_enable_a ? data1__h25677 : 128'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        block_ram_xr_enable_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
	block_ram_xr_enable_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
	block_ram_xr_start <= `BSV_ASSIGNMENT_DELAY 1'd1;
	count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ram_out <= `BSV_ASSIGNMENT_DELAY 47'd0;
	ram_out_active <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rd <= `BSV_ASSIGNMENT_DELAY 47'd0;
	rd_active <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (block_ram_xr_enable_a$EN)
	  block_ram_xr_enable_a <= `BSV_ASSIGNMENT_DELAY
	      block_ram_xr_enable_a$D_IN;
	if (block_ram_xr_enable_b$EN)
	  block_ram_xr_enable_b <= `BSV_ASSIGNMENT_DELAY
	      block_ram_xr_enable_b$D_IN;
	if (block_ram_xr_start$EN)
	  block_ram_xr_start <= `BSV_ASSIGNMENT_DELAY block_ram_xr_start$D_IN;
	if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (ram_out$EN) ram_out <= `BSV_ASSIGNMENT_DELAY ram_out$D_IN;
	if (ram_out_active$EN)
	  ram_out_active <= `BSV_ASSIGNMENT_DELAY ram_out_active$D_IN;
	if (rd$EN) rd <= `BSV_ASSIGNMENT_DELAY rd$D_IN;
	if (rd_active$EN) rd_active <= `BSV_ASSIGNMENT_DELAY rd_active$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    block_ram_xr_enable_a = 1'h0;
    block_ram_xr_enable_b = 1'h0;
    block_ram_xr_start = 1'h0;
    count = 4'hA;
    ram_out = 47'h2AAAAAAAAAAA;
    ram_out_active = 1'h0;
    rd = 47'h2AAAAAAAAAAA;
    rd_active = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (block_ram_xr_start)
	$display("BRAMServer",
		 " XRAM settings:",
		 " gc.addr_size=",
		 $signed(32'd12),
		 " gc.data_size=",
		 $signed(32'd128),
		 " gc.width=",
		 $signed(32'd16),
		 " gc.height=",
		 $signed(32'd1),
		 " gc.d_size=",
		 $signed(32'd8),
		 " gc.a_size=",
		 $signed(32'd12),
		 " gc.unused_a_bits=",
		 $signed(32'd0),
		 " gc.valid=",
		 1'd1,
		 " size=",
		 $signed(32'd524288),
		 " bits");
  end
  // synopsys translate_on
endmodule  // mkBRAMServer

